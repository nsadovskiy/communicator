// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class RecReg;
class RecReg_General;
class RecReg_Photo;
class RecReg_NAV;
class RecReg_UniDt;
class RecReg_CanDt;
class RecReg_LLSDt;
class RecReg_LOG;

// ===================================================================

class RecReg_General : public ::google::protobuf::Message {
 public:
  RecReg_General();
  virtual ~RecReg_General();
  
  RecReg_General(const RecReg_General& from);
  
  inline RecReg_General& operator=(const RecReg_General& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecReg_General& default_instance();
  
  void Swap(RecReg_General* other);
  
  // implements Message ----------------------------------------------
  
  RecReg_General* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecReg_General& from);
  void MergeFrom(const RecReg_General& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 Time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);
  
  // optional uint32 IDFAS = 2;
  inline bool has_idfas() const;
  inline void clear_idfas();
  static const int kIDFASFieldNumber = 2;
  inline ::google::protobuf::uint32 idfas() const;
  inline void set_idfas(::google::protobuf::uint32 value);
  
  // optional bytes IDDrv = 3;
  inline bool has_iddrv() const;
  inline void clear_iddrv();
  static const int kIDDrvFieldNumber = 3;
  inline const ::std::string& iddrv() const;
  inline void set_iddrv(const ::std::string& value);
  inline void set_iddrv(const char* value);
  inline void set_iddrv(const void* value, size_t size);
  inline ::std::string* mutable_iddrv();
  inline ::std::string* release_iddrv();
  
  // optional uint32 FLG = 4;
  inline bool has_flg() const;
  inline void clear_flg();
  static const int kFLGFieldNumber = 4;
  inline ::google::protobuf::uint32 flg() const;
  inline void set_flg(::google::protobuf::uint32 value);
  
  // optional uint32 Mileage = 5;
  inline bool has_mileage() const;
  inline void clear_mileage();
  static const int kMileageFieldNumber = 5;
  inline ::google::protobuf::uint32 mileage() const;
  inline void set_mileage(::google::protobuf::uint32 value);
  
  // optional uint32 VImp = 6;
  inline bool has_vimp() const;
  inline void clear_vimp();
  static const int kVImpFieldNumber = 6;
  inline ::google::protobuf::uint32 vimp() const;
  inline void set_vimp(::google::protobuf::uint32 value);
  
  // optional uint32 TImp = 7;
  inline bool has_timp() const;
  inline void clear_timp();
  static const int kTImpFieldNumber = 7;
  inline ::google::protobuf::uint32 timp() const;
  inline void set_timp(::google::protobuf::uint32 value);
  
  // optional uint32 Uboard = 8;
  inline bool has_uboard() const;
  inline void clear_uboard();
  static const int kUboardFieldNumber = 8;
  inline ::google::protobuf::uint32 uboard() const;
  inline void set_uboard(::google::protobuf::uint32 value);
  
  // optional uint32 BatLife = 9;
  inline bool has_batlife() const;
  inline void clear_batlife();
  static const int kBatLifeFieldNumber = 9;
  inline ::google::protobuf::uint32 batlife() const;
  inline void set_batlife(::google::protobuf::uint32 value);
  
  // optional sint32 SumAcc = 10;
  inline bool has_sumacc() const;
  inline void clear_sumacc();
  static const int kSumAccFieldNumber = 10;
  inline ::google::protobuf::int32 sumacc() const;
  inline void set_sumacc(::google::protobuf::int32 value);
  
  // optional bytes Phone = 11;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 11;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const void* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  
  // optional sint32 AmtrX = 12;
  inline bool has_amtrx() const;
  inline void clear_amtrx();
  static const int kAmtrXFieldNumber = 12;
  inline ::google::protobuf::int32 amtrx() const;
  inline void set_amtrx(::google::protobuf::int32 value);
  
  // optional sint32 AmtrY = 13;
  inline bool has_amtry() const;
  inline void clear_amtry();
  static const int kAmtrYFieldNumber = 13;
  inline ::google::protobuf::int32 amtry() const;
  inline void set_amtry(::google::protobuf::int32 value);
  
  // optional sint32 AmtrZ = 14;
  inline bool has_amtrz() const;
  inline void clear_amtrz();
  static const int kAmtrZFieldNumber = 14;
  inline ::google::protobuf::int32 amtrz() const;
  inline void set_amtrz(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:RecReg.General)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_idfas();
  inline void clear_has_idfas();
  inline void set_has_iddrv();
  inline void clear_has_iddrv();
  inline void set_has_flg();
  inline void clear_has_flg();
  inline void set_has_mileage();
  inline void clear_has_mileage();
  inline void set_has_vimp();
  inline void clear_has_vimp();
  inline void set_has_timp();
  inline void clear_has_timp();
  inline void set_has_uboard();
  inline void clear_has_uboard();
  inline void set_has_batlife();
  inline void clear_has_batlife();
  inline void set_has_sumacc();
  inline void clear_has_sumacc();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_amtrx();
  inline void clear_has_amtrx();
  inline void set_has_amtry();
  inline void clear_has_amtry();
  inline void set_has_amtrz();
  inline void clear_has_amtrz();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 idfas_;
  ::std::string* iddrv_;
  ::google::protobuf::uint32 flg_;
  ::google::protobuf::uint32 mileage_;
  ::google::protobuf::uint32 vimp_;
  ::google::protobuf::uint32 timp_;
  ::google::protobuf::uint32 uboard_;
  ::google::protobuf::uint32 batlife_;
  ::std::string* phone_;
  ::google::protobuf::int32 sumacc_;
  ::google::protobuf::int32 amtrx_;
  ::google::protobuf::int32 amtry_;
  ::google::protobuf::int32 amtrz_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static RecReg_General* default_instance_;
};
// -------------------------------------------------------------------

class RecReg_Photo : public ::google::protobuf::Message {
 public:
  RecReg_Photo();
  virtual ~RecReg_Photo();
  
  RecReg_Photo(const RecReg_Photo& from);
  
  inline RecReg_Photo& operator=(const RecReg_Photo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecReg_Photo& default_instance();
  
  void Swap(RecReg_Photo* other);
  
  // implements Message ----------------------------------------------
  
  RecReg_Photo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecReg_Photo& from);
  void MergeFrom(const RecReg_Photo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 POSBLK = 1;
  inline bool has_posblk() const;
  inline void clear_posblk();
  static const int kPOSBLKFieldNumber = 1;
  inline ::google::protobuf::uint32 posblk() const;
  inline void set_posblk(::google::protobuf::uint32 value);
  
  // optional uint32 SZPHOTO = 2;
  inline bool has_szphoto() const;
  inline void clear_szphoto();
  static const int kSZPHOTOFieldNumber = 2;
  inline ::google::protobuf::uint32 szphoto() const;
  inline void set_szphoto(::google::protobuf::uint32 value);
  
  // optional uint32 SIZE = 3;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSIZEFieldNumber = 3;
  inline ::google::protobuf::uint32 size() const;
  inline void set_size(::google::protobuf::uint32 value);
  
  // optional bytes BUF = 4;
  inline bool has_buf() const;
  inline void clear_buf();
  static const int kBUFFieldNumber = 4;
  inline const ::std::string& buf() const;
  inline void set_buf(const ::std::string& value);
  inline void set_buf(const char* value);
  inline void set_buf(const void* value, size_t size);
  inline ::std::string* mutable_buf();
  inline ::std::string* release_buf();
  
  // optional uint32 IDPH = 5;
  inline bool has_idph() const;
  inline void clear_idph();
  static const int kIDPHFieldNumber = 5;
  inline ::google::protobuf::uint32 idph() const;
  inline void set_idph(::google::protobuf::uint32 value);
  
  // optional uint32 IMGSTAT = 6;
  inline bool has_imgstat() const;
  inline void clear_imgstat();
  static const int kIMGSTATFieldNumber = 6;
  inline ::google::protobuf::uint32 imgstat() const;
  inline void set_imgstat(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:RecReg.Photo)
 private:
  inline void set_has_posblk();
  inline void clear_has_posblk();
  inline void set_has_szphoto();
  inline void clear_has_szphoto();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_buf();
  inline void clear_has_buf();
  inline void set_has_idph();
  inline void clear_has_idph();
  inline void set_has_imgstat();
  inline void clear_has_imgstat();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 posblk_;
  ::google::protobuf::uint32 szphoto_;
  ::std::string* buf_;
  ::google::protobuf::uint32 size_;
  ::google::protobuf::uint32 idph_;
  ::google::protobuf::uint32 imgstat_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static RecReg_Photo* default_instance_;
};
// -------------------------------------------------------------------

class RecReg_NAV : public ::google::protobuf::Message {
 public:
  RecReg_NAV();
  virtual ~RecReg_NAV();
  
  RecReg_NAV(const RecReg_NAV& from);
  
  inline RecReg_NAV& operator=(const RecReg_NAV& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecReg_NAV& default_instance();
  
  void Swap(RecReg_NAV* other);
  
  // implements Message ----------------------------------------------
  
  RecReg_NAV* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecReg_NAV& from);
  void MergeFrom(const RecReg_NAV& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 LAT = 1;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLATFieldNumber = 1;
  inline ::google::protobuf::int32 lat() const;
  inline void set_lat(::google::protobuf::int32 value);
  
  // required sint32 LON = 2;
  inline bool has_lon() const;
  inline void clear_lon();
  static const int kLONFieldNumber = 2;
  inline ::google::protobuf::int32 lon() const;
  inline void set_lon(::google::protobuf::int32 value);
  
  // required uint32 GPSVel = 3;
  inline bool has_gpsvel() const;
  inline void clear_gpsvel();
  static const int kGPSVelFieldNumber = 3;
  inline ::google::protobuf::uint32 gpsvel() const;
  inline void set_gpsvel(::google::protobuf::uint32 value);
  
  // required uint32 GPSDir = 4;
  inline bool has_gpsdir() const;
  inline void clear_gpsdir();
  static const int kGPSDirFieldNumber = 4;
  inline ::google::protobuf::uint32 gpsdir() const;
  inline void set_gpsdir(::google::protobuf::uint32 value);
  
  // required uint32 GPSNSat = 5;
  inline bool has_gpsnsat() const;
  inline void clear_gpsnsat();
  static const int kGPSNSatFieldNumber = 5;
  inline ::google::protobuf::uint32 gpsnsat() const;
  inline void set_gpsnsat(::google::protobuf::uint32 value);
  
  // required sint32 GPSAlt = 6;
  inline bool has_gpsalt() const;
  inline void clear_gpsalt();
  static const int kGPSAltFieldNumber = 6;
  inline ::google::protobuf::int32 gpsalt() const;
  inline void set_gpsalt(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:RecReg.NAV)
 private:
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_lon();
  inline void clear_has_lon();
  inline void set_has_gpsvel();
  inline void clear_has_gpsvel();
  inline void set_has_gpsdir();
  inline void clear_has_gpsdir();
  inline void set_has_gpsnsat();
  inline void clear_has_gpsnsat();
  inline void set_has_gpsalt();
  inline void clear_has_gpsalt();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 lat_;
  ::google::protobuf::int32 lon_;
  ::google::protobuf::uint32 gpsvel_;
  ::google::protobuf::uint32 gpsdir_;
  ::google::protobuf::uint32 gpsnsat_;
  ::google::protobuf::int32 gpsalt_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static RecReg_NAV* default_instance_;
};
// -------------------------------------------------------------------

class RecReg_UniDt : public ::google::protobuf::Message {
 public:
  RecReg_UniDt();
  virtual ~RecReg_UniDt();
  
  RecReg_UniDt(const RecReg_UniDt& from);
  
  inline RecReg_UniDt& operator=(const RecReg_UniDt& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecReg_UniDt& default_instance();
  
  void Swap(RecReg_UniDt* other);
  
  // implements Message ----------------------------------------------
  
  RecReg_UniDt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecReg_UniDt& from);
  void MergeFrom(const RecReg_UniDt& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional sint32 UniVal0 = 1;
  inline bool has_unival0() const;
  inline void clear_unival0();
  static const int kUniVal0FieldNumber = 1;
  inline ::google::protobuf::int32 unival0() const;
  inline void set_unival0(::google::protobuf::int32 value);
  
  // optional sint32 UniVal1 = 2;
  inline bool has_unival1() const;
  inline void clear_unival1();
  static const int kUniVal1FieldNumber = 2;
  inline ::google::protobuf::int32 unival1() const;
  inline void set_unival1(::google::protobuf::int32 value);
  
  // optional sint32 UniVal2 = 3;
  inline bool has_unival2() const;
  inline void clear_unival2();
  static const int kUniVal2FieldNumber = 3;
  inline ::google::protobuf::int32 unival2() const;
  inline void set_unival2(::google::protobuf::int32 value);
  
  // optional sint32 UniVal3 = 4;
  inline bool has_unival3() const;
  inline void clear_unival3();
  static const int kUniVal3FieldNumber = 4;
  inline ::google::protobuf::int32 unival3() const;
  inline void set_unival3(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:RecReg.UniDt)
 private:
  inline void set_has_unival0();
  inline void clear_has_unival0();
  inline void set_has_unival1();
  inline void clear_has_unival1();
  inline void set_has_unival2();
  inline void clear_has_unival2();
  inline void set_has_unival3();
  inline void clear_has_unival3();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 unival0_;
  ::google::protobuf::int32 unival1_;
  ::google::protobuf::int32 unival2_;
  ::google::protobuf::int32 unival3_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static RecReg_UniDt* default_instance_;
};
// -------------------------------------------------------------------

class RecReg_CanDt : public ::google::protobuf::Message {
 public:
  RecReg_CanDt();
  virtual ~RecReg_CanDt();
  
  RecReg_CanDt(const RecReg_CanDt& from);
  
  inline RecReg_CanDt& operator=(const RecReg_CanDt& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecReg_CanDt& default_instance();
  
  void Swap(RecReg_CanDt* other);
  
  // implements Message ----------------------------------------------
  
  RecReg_CanDt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecReg_CanDt& from);
  void MergeFrom(const RecReg_CanDt& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 SPN70 = 70;
  inline bool has_spn70() const;
  inline void clear_spn70();
  static const int kSPN70FieldNumber = 70;
  inline ::google::protobuf::uint32 spn70() const;
  inline void set_spn70(::google::protobuf::uint32 value);
  
  // optional uint32 SPN91 = 91;
  inline bool has_spn91() const;
  inline void clear_spn91();
  static const int kSPN91FieldNumber = 91;
  inline ::google::protobuf::uint32 spn91() const;
  inline void set_spn91(::google::protobuf::uint32 value);
  
  // optional uint32 SPN100 = 100;
  inline bool has_spn100() const;
  inline void clear_spn100();
  static const int kSPN100FieldNumber = 100;
  inline ::google::protobuf::uint32 spn100() const;
  inline void set_spn100(::google::protobuf::uint32 value);
  
  // optional uint32 SPN110 = 110;
  inline bool has_spn110() const;
  inline void clear_spn110();
  static const int kSPN110FieldNumber = 110;
  inline ::google::protobuf::uint32 spn110() const;
  inline void set_spn110(::google::protobuf::uint32 value);
  
  // optional uint32 SPN174 = 174;
  inline bool has_spn174() const;
  inline void clear_spn174();
  static const int kSPN174FieldNumber = 174;
  inline ::google::protobuf::uint32 spn174() const;
  inline void set_spn174(::google::protobuf::uint32 value);
  
  // optional uint32 SPN175 = 175;
  inline bool has_spn175() const;
  inline void clear_spn175();
  static const int kSPN175FieldNumber = 175;
  inline ::google::protobuf::uint32 spn175() const;
  inline void set_spn175(::google::protobuf::uint32 value);
  
  // optional uint32 SPN182 = 182;
  inline bool has_spn182() const;
  inline void clear_spn182();
  static const int kSPN182FieldNumber = 182;
  inline ::google::protobuf::uint32 spn182() const;
  inline void set_spn182(::google::protobuf::uint32 value);
  
  // optional uint32 SPN184 = 184;
  inline bool has_spn184() const;
  inline void clear_spn184();
  static const int kSPN184FieldNumber = 184;
  inline ::google::protobuf::uint32 spn184() const;
  inline void set_spn184(::google::protobuf::uint32 value);
  
  // optional uint32 SPN190 = 190;
  inline bool has_spn190() const;
  inline void clear_spn190();
  static const int kSPN190FieldNumber = 190;
  inline ::google::protobuf::uint32 spn190() const;
  inline void set_spn190(::google::protobuf::uint32 value);
  
  // optional uint32 SPN244 = 244;
  inline bool has_spn244() const;
  inline void clear_spn244();
  static const int kSPN244FieldNumber = 244;
  inline ::google::protobuf::uint32 spn244() const;
  inline void set_spn244(::google::protobuf::uint32 value);
  
  // optional uint32 SPN245 = 245;
  inline bool has_spn245() const;
  inline void clear_spn245();
  static const int kSPN245FieldNumber = 245;
  inline ::google::protobuf::uint32 spn245() const;
  inline void set_spn245(::google::protobuf::uint32 value);
  
  // optional uint32 SPN247 = 247;
  inline bool has_spn247() const;
  inline void clear_spn247();
  static const int kSPN247FieldNumber = 247;
  inline ::google::protobuf::uint32 spn247() const;
  inline void set_spn247(::google::protobuf::uint32 value);
  
  // optional uint32 SPN250 = 250;
  inline bool has_spn250() const;
  inline void clear_spn250();
  static const int kSPN250FieldNumber = 250;
  inline ::google::protobuf::uint32 spn250() const;
  inline void set_spn250(::google::protobuf::uint32 value);
  
  // optional uint32 SPN521 = 521;
  inline bool has_spn521() const;
  inline void clear_spn521();
  static const int kSPN521FieldNumber = 521;
  inline ::google::protobuf::uint32 spn521() const;
  inline void set_spn521(::google::protobuf::uint32 value);
  
  // optional uint32 SPN522 = 522;
  inline bool has_spn522() const;
  inline void clear_spn522();
  static const int kSPN522FieldNumber = 522;
  inline ::google::protobuf::uint32 spn522() const;
  inline void set_spn522(::google::protobuf::uint32 value);
  
  // optional uint32 SPN527 = 527;
  inline bool has_spn527() const;
  inline void clear_spn527();
  static const int kSPN527FieldNumber = 527;
  inline ::google::protobuf::uint32 spn527() const;
  inline void set_spn527(::google::protobuf::uint32 value);
  
  // repeated uint32 SPN582 = 582 [packed = true];
  inline int spn582_size() const;
  inline void clear_spn582();
  static const int kSPN582FieldNumber = 582;
  inline ::google::protobuf::uint32 spn582(int index) const;
  inline void set_spn582(int index, ::google::protobuf::uint32 value);
  inline void add_spn582(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      spn582() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_spn582();
  
  // optional uint32 SPN597 = 597;
  inline bool has_spn597() const;
  inline void clear_spn597();
  static const int kSPN597FieldNumber = 597;
  inline ::google::protobuf::uint32 spn597() const;
  inline void set_spn597(::google::protobuf::uint32 value);
  
  // optional uint32 SPN598 = 598;
  inline bool has_spn598() const;
  inline void clear_spn598();
  static const int kSPN598FieldNumber = 598;
  inline ::google::protobuf::uint32 spn598() const;
  inline void set_spn598(::google::protobuf::uint32 value);
  
  // optional uint32 SPN914 = 914;
  inline bool has_spn914() const;
  inline void clear_spn914();
  static const int kSPN914FieldNumber = 914;
  inline ::google::protobuf::uint32 spn914() const;
  inline void set_spn914(::google::protobuf::uint32 value);
  
  // optional uint32 SPN916 = 916;
  inline bool has_spn916() const;
  inline void clear_spn916();
  static const int kSPN916FieldNumber = 916;
  inline ::google::protobuf::uint32 spn916() const;
  inline void set_spn916(::google::protobuf::uint32 value);
  
  // repeated uint32 SPN928 = 928 [packed = true];
  inline int spn928_size() const;
  inline void clear_spn928();
  static const int kSPN928FieldNumber = 928;
  inline ::google::protobuf::uint32 spn928(int index) const;
  inline void set_spn928(int index, ::google::protobuf::uint32 value);
  inline void add_spn928(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      spn928() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_spn928();
  
  // optional uint32 SPN1624 = 1624;
  inline bool has_spn1624() const;
  inline void clear_spn1624();
  static const int kSPN1624FieldNumber = 1624;
  inline ::google::protobuf::uint32 spn1624() const;
  inline void set_spn1624(::google::protobuf::uint32 value);
  
  // optional uint32 SPN1821 = 1821;
  inline bool has_spn1821() const;
  inline void clear_spn1821();
  static const int kSPN1821FieldNumber = 1821;
  inline ::google::protobuf::uint32 spn1821() const;
  inline void set_spn1821(::google::protobuf::uint32 value);
  
  // optional uint32 SPN1856 = 1856;
  inline bool has_spn1856() const;
  inline void clear_spn1856();
  static const int kSPN1856FieldNumber = 1856;
  inline ::google::protobuf::uint32 spn1856() const;
  inline void set_spn1856(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:RecReg.CanDt)
 private:
  inline void set_has_spn70();
  inline void clear_has_spn70();
  inline void set_has_spn91();
  inline void clear_has_spn91();
  inline void set_has_spn100();
  inline void clear_has_spn100();
  inline void set_has_spn110();
  inline void clear_has_spn110();
  inline void set_has_spn174();
  inline void clear_has_spn174();
  inline void set_has_spn175();
  inline void clear_has_spn175();
  inline void set_has_spn182();
  inline void clear_has_spn182();
  inline void set_has_spn184();
  inline void clear_has_spn184();
  inline void set_has_spn190();
  inline void clear_has_spn190();
  inline void set_has_spn244();
  inline void clear_has_spn244();
  inline void set_has_spn245();
  inline void clear_has_spn245();
  inline void set_has_spn247();
  inline void clear_has_spn247();
  inline void set_has_spn250();
  inline void clear_has_spn250();
  inline void set_has_spn521();
  inline void clear_has_spn521();
  inline void set_has_spn522();
  inline void clear_has_spn522();
  inline void set_has_spn527();
  inline void clear_has_spn527();
  inline void set_has_spn597();
  inline void clear_has_spn597();
  inline void set_has_spn598();
  inline void clear_has_spn598();
  inline void set_has_spn914();
  inline void clear_has_spn914();
  inline void set_has_spn916();
  inline void clear_has_spn916();
  inline void set_has_spn1624();
  inline void clear_has_spn1624();
  inline void set_has_spn1821();
  inline void clear_has_spn1821();
  inline void set_has_spn1856();
  inline void clear_has_spn1856();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 spn70_;
  ::google::protobuf::uint32 spn91_;
  ::google::protobuf::uint32 spn100_;
  ::google::protobuf::uint32 spn110_;
  ::google::protobuf::uint32 spn174_;
  ::google::protobuf::uint32 spn175_;
  ::google::protobuf::uint32 spn182_;
  ::google::protobuf::uint32 spn184_;
  ::google::protobuf::uint32 spn190_;
  ::google::protobuf::uint32 spn244_;
  ::google::protobuf::uint32 spn245_;
  ::google::protobuf::uint32 spn247_;
  ::google::protobuf::uint32 spn250_;
  ::google::protobuf::uint32 spn521_;
  ::google::protobuf::uint32 spn522_;
  ::google::protobuf::uint32 spn527_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > spn582_;
  mutable int _spn582_cached_byte_size_;
  ::google::protobuf::uint32 spn597_;
  ::google::protobuf::uint32 spn598_;
  ::google::protobuf::uint32 spn914_;
  ::google::protobuf::uint32 spn916_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > spn928_;
  mutable int _spn928_cached_byte_size_;
  ::google::protobuf::uint32 spn1624_;
  ::google::protobuf::uint32 spn1821_;
  ::google::protobuf::uint32 spn1856_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(25 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static RecReg_CanDt* default_instance_;
};
// -------------------------------------------------------------------

class RecReg_LLSDt : public ::google::protobuf::Message {
 public:
  RecReg_LLSDt();
  virtual ~RecReg_LLSDt();
  
  RecReg_LLSDt(const RecReg_LLSDt& from);
  
  inline RecReg_LLSDt& operator=(const RecReg_LLSDt& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecReg_LLSDt& default_instance();
  
  void Swap(RecReg_LLSDt* other);
  
  // implements Message ----------------------------------------------
  
  RecReg_LLSDt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecReg_LLSDt& from);
  void MergeFrom(const RecReg_LLSDt& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional sint32 TLLS1 = 1;
  inline bool has_tlls1() const;
  inline void clear_tlls1();
  static const int kTLLS1FieldNumber = 1;
  inline ::google::protobuf::int32 tlls1() const;
  inline void set_tlls1(::google::protobuf::int32 value);
  
  // optional uint32 CLLS1 = 2;
  inline bool has_clls1() const;
  inline void clear_clls1();
  static const int kCLLS1FieldNumber = 2;
  inline ::google::protobuf::uint32 clls1() const;
  inline void set_clls1(::google::protobuf::uint32 value);
  
  // optional sint32 FLLS1 = 3;
  inline bool has_flls1() const;
  inline void clear_flls1();
  static const int kFLLS1FieldNumber = 3;
  inline ::google::protobuf::int32 flls1() const;
  inline void set_flls1(::google::protobuf::int32 value);
  
  // optional sint32 TLLS2 = 4;
  inline bool has_tlls2() const;
  inline void clear_tlls2();
  static const int kTLLS2FieldNumber = 4;
  inline ::google::protobuf::int32 tlls2() const;
  inline void set_tlls2(::google::protobuf::int32 value);
  
  // optional uint32 CLLS2 = 5;
  inline bool has_clls2() const;
  inline void clear_clls2();
  static const int kCLLS2FieldNumber = 5;
  inline ::google::protobuf::uint32 clls2() const;
  inline void set_clls2(::google::protobuf::uint32 value);
  
  // optional sint32 FLLS2 = 6;
  inline bool has_flls2() const;
  inline void clear_flls2();
  static const int kFLLS2FieldNumber = 6;
  inline ::google::protobuf::int32 flls2() const;
  inline void set_flls2(::google::protobuf::int32 value);
  
  // optional sint32 TLLS3 = 7;
  inline bool has_tlls3() const;
  inline void clear_tlls3();
  static const int kTLLS3FieldNumber = 7;
  inline ::google::protobuf::int32 tlls3() const;
  inline void set_tlls3(::google::protobuf::int32 value);
  
  // optional uint32 CLLS3 = 8;
  inline bool has_clls3() const;
  inline void clear_clls3();
  static const int kCLLS3FieldNumber = 8;
  inline ::google::protobuf::uint32 clls3() const;
  inline void set_clls3(::google::protobuf::uint32 value);
  
  // optional sint32 FLLS3 = 9;
  inline bool has_flls3() const;
  inline void clear_flls3();
  static const int kFLLS3FieldNumber = 9;
  inline ::google::protobuf::int32 flls3() const;
  inline void set_flls3(::google::protobuf::int32 value);
  
  // optional sint32 TLLS4 = 10;
  inline bool has_tlls4() const;
  inline void clear_tlls4();
  static const int kTLLS4FieldNumber = 10;
  inline ::google::protobuf::int32 tlls4() const;
  inline void set_tlls4(::google::protobuf::int32 value);
  
  // optional uint32 CLLS4 = 11;
  inline bool has_clls4() const;
  inline void clear_clls4();
  static const int kCLLS4FieldNumber = 11;
  inline ::google::protobuf::uint32 clls4() const;
  inline void set_clls4(::google::protobuf::uint32 value);
  
  // optional sint32 FLLS4 = 12;
  inline bool has_flls4() const;
  inline void clear_flls4();
  static const int kFLLS4FieldNumber = 12;
  inline ::google::protobuf::int32 flls4() const;
  inline void set_flls4(::google::protobuf::int32 value);
  
  // optional sint32 TLLS5 = 13;
  inline bool has_tlls5() const;
  inline void clear_tlls5();
  static const int kTLLS5FieldNumber = 13;
  inline ::google::protobuf::int32 tlls5() const;
  inline void set_tlls5(::google::protobuf::int32 value);
  
  // optional uint32 CLLS5 = 14;
  inline bool has_clls5() const;
  inline void clear_clls5();
  static const int kCLLS5FieldNumber = 14;
  inline ::google::protobuf::uint32 clls5() const;
  inline void set_clls5(::google::protobuf::uint32 value);
  
  // optional sint32 FLLS5 = 15;
  inline bool has_flls5() const;
  inline void clear_flls5();
  static const int kFLLS5FieldNumber = 15;
  inline ::google::protobuf::int32 flls5() const;
  inline void set_flls5(::google::protobuf::int32 value);
  
  // optional sint32 TLLS6 = 16;
  inline bool has_tlls6() const;
  inline void clear_tlls6();
  static const int kTLLS6FieldNumber = 16;
  inline ::google::protobuf::int32 tlls6() const;
  inline void set_tlls6(::google::protobuf::int32 value);
  
  // optional uint32 CLLS6 = 17;
  inline bool has_clls6() const;
  inline void clear_clls6();
  static const int kCLLS6FieldNumber = 17;
  inline ::google::protobuf::uint32 clls6() const;
  inline void set_clls6(::google::protobuf::uint32 value);
  
  // optional uint32 FLLS6 = 18;
  inline bool has_flls6() const;
  inline void clear_flls6();
  static const int kFLLS6FieldNumber = 18;
  inline ::google::protobuf::uint32 flls6() const;
  inline void set_flls6(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:RecReg.LLSDt)
 private:
  inline void set_has_tlls1();
  inline void clear_has_tlls1();
  inline void set_has_clls1();
  inline void clear_has_clls1();
  inline void set_has_flls1();
  inline void clear_has_flls1();
  inline void set_has_tlls2();
  inline void clear_has_tlls2();
  inline void set_has_clls2();
  inline void clear_has_clls2();
  inline void set_has_flls2();
  inline void clear_has_flls2();
  inline void set_has_tlls3();
  inline void clear_has_tlls3();
  inline void set_has_clls3();
  inline void clear_has_clls3();
  inline void set_has_flls3();
  inline void clear_has_flls3();
  inline void set_has_tlls4();
  inline void clear_has_tlls4();
  inline void set_has_clls4();
  inline void clear_has_clls4();
  inline void set_has_flls4();
  inline void clear_has_flls4();
  inline void set_has_tlls5();
  inline void clear_has_tlls5();
  inline void set_has_clls5();
  inline void clear_has_clls5();
  inline void set_has_flls5();
  inline void clear_has_flls5();
  inline void set_has_tlls6();
  inline void clear_has_tlls6();
  inline void set_has_clls6();
  inline void clear_has_clls6();
  inline void set_has_flls6();
  inline void clear_has_flls6();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 tlls1_;
  ::google::protobuf::uint32 clls1_;
  ::google::protobuf::int32 flls1_;
  ::google::protobuf::int32 tlls2_;
  ::google::protobuf::uint32 clls2_;
  ::google::protobuf::int32 flls2_;
  ::google::protobuf::int32 tlls3_;
  ::google::protobuf::uint32 clls3_;
  ::google::protobuf::int32 flls3_;
  ::google::protobuf::int32 tlls4_;
  ::google::protobuf::uint32 clls4_;
  ::google::protobuf::int32 flls4_;
  ::google::protobuf::int32 tlls5_;
  ::google::protobuf::uint32 clls5_;
  ::google::protobuf::int32 flls5_;
  ::google::protobuf::int32 tlls6_;
  ::google::protobuf::uint32 clls6_;
  ::google::protobuf::uint32 flls6_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static RecReg_LLSDt* default_instance_;
};
// -------------------------------------------------------------------

class RecReg_LOG : public ::google::protobuf::Message {
 public:
  RecReg_LOG();
  virtual ~RecReg_LOG();
  
  RecReg_LOG(const RecReg_LOG& from);
  
  inline RecReg_LOG& operator=(const RecReg_LOG& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecReg_LOG& default_instance();
  
  void Swap(RecReg_LOG* other);
  
  // implements Message ----------------------------------------------
  
  RecReg_LOG* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecReg_LOG& from);
  void MergeFrom(const RecReg_LOG& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string Debug = 1;
  inline int debug_size() const;
  inline void clear_debug();
  static const int kDebugFieldNumber = 1;
  inline const ::std::string& debug(int index) const;
  inline ::std::string* mutable_debug(int index);
  inline void set_debug(int index, const ::std::string& value);
  inline void set_debug(int index, const char* value);
  inline void set_debug(int index, const char* value, size_t size);
  inline ::std::string* add_debug();
  inline void add_debug(const ::std::string& value);
  inline void add_debug(const char* value);
  inline void add_debug(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& debug() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_debug();
  
  // @@protoc_insertion_point(class_scope:RecReg.LOG)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> debug_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static RecReg_LOG* default_instance_;
};
// -------------------------------------------------------------------

class RecReg : public ::google::protobuf::Message {
 public:
  RecReg();
  virtual ~RecReg();
  
  RecReg(const RecReg& from);
  
  inline RecReg& operator=(const RecReg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecReg& default_instance();
  
  void Swap(RecReg* other);
  
  // implements Message ----------------------------------------------
  
  RecReg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecReg& from);
  void MergeFrom(const RecReg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef RecReg_General General;
  typedef RecReg_Photo Photo;
  typedef RecReg_NAV NAV;
  typedef RecReg_UniDt UniDt;
  typedef RecReg_CanDt CanDt;
  typedef RecReg_LLSDt LLSDt;
  typedef RecReg_LOG LOG;
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 mID = 1 [packed = true];
  inline int mid_size() const;
  inline void clear_mid();
  static const int kMIDFieldNumber = 1;
  inline ::google::protobuf::uint32 mid(int index) const;
  inline void set_mid(int index, ::google::protobuf::uint32 value);
  inline void add_mid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mid();
  
  // optional group General = 2 {
  inline bool has_general() const;
  inline void clear_general();
  static const int kGeneralFieldNumber = 2;
  inline const ::RecReg_General& general() const;
  inline ::RecReg_General* mutable_general();
  inline ::RecReg_General* release_general();
  
  // optional group Photo = 4 {
  inline bool has_photo() const;
  inline void clear_photo();
  static const int kPhotoFieldNumber = 4;
  inline const ::RecReg_Photo& photo() const;
  inline ::RecReg_Photo* mutable_photo();
  inline ::RecReg_Photo* release_photo();
  
  // optional group NAV = 5 {
  inline bool has_nav() const;
  inline void clear_nav();
  static const int kNavFieldNumber = 5;
  inline const ::RecReg_NAV& nav() const;
  inline ::RecReg_NAV* mutable_nav();
  inline ::RecReg_NAV* release_nav();
  
  // optional group UniDt = 6 {
  inline bool has_unidt() const;
  inline void clear_unidt();
  static const int kUnidtFieldNumber = 6;
  inline const ::RecReg_UniDt& unidt() const;
  inline ::RecReg_UniDt* mutable_unidt();
  inline ::RecReg_UniDt* release_unidt();
  
  // optional group CanDt = 7 {
  inline bool has_candt() const;
  inline void clear_candt();
  static const int kCandtFieldNumber = 7;
  inline const ::RecReg_CanDt& candt() const;
  inline ::RecReg_CanDt* mutable_candt();
  inline ::RecReg_CanDt* release_candt();
  
  // optional group LLSDt = 8 {
  inline bool has_llsdt() const;
  inline void clear_llsdt();
  static const int kLlsdtFieldNumber = 8;
  inline const ::RecReg_LLSDt& llsdt() const;
  inline ::RecReg_LLSDt* mutable_llsdt();
  inline ::RecReg_LLSDt* release_llsdt();
  
  // optional group LOG = 16 {
  inline bool has_log() const;
  inline void clear_log();
  static const int kLogFieldNumber = 16;
  inline const ::RecReg_LOG& log() const;
  inline ::RecReg_LOG* mutable_log();
  inline ::RecReg_LOG* release_log();
  
  // @@protoc_insertion_point(class_scope:RecReg)
 private:
  inline void set_has_general();
  inline void clear_has_general();
  inline void set_has_photo();
  inline void clear_has_photo();
  inline void set_has_nav();
  inline void clear_has_nav();
  inline void set_has_unidt();
  inline void clear_has_unidt();
  inline void set_has_candt();
  inline void clear_has_candt();
  inline void set_has_llsdt();
  inline void clear_has_llsdt();
  inline void set_has_log();
  inline void clear_has_log();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mid_;
  mutable int _mid_cached_byte_size_;
  ::RecReg_General* general_;
  ::RecReg_Photo* photo_;
  ::RecReg_NAV* nav_;
  ::RecReg_UniDt* unidt_;
  ::RecReg_CanDt* candt_;
  ::RecReg_LLSDt* llsdt_;
  ::RecReg_LOG* log_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static RecReg* default_instance_;
};
// ===================================================================


// ===================================================================

// RecReg_General

// optional uint32 Time = 1;
inline bool RecReg_General::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecReg_General::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecReg_General::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecReg_General::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 RecReg_General::time() const {
  return time_;
}
inline void RecReg_General::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional uint32 IDFAS = 2;
inline bool RecReg_General::has_idfas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecReg_General::set_has_idfas() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecReg_General::clear_has_idfas() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecReg_General::clear_idfas() {
  idfas_ = 0u;
  clear_has_idfas();
}
inline ::google::protobuf::uint32 RecReg_General::idfas() const {
  return idfas_;
}
inline void RecReg_General::set_idfas(::google::protobuf::uint32 value) {
  set_has_idfas();
  idfas_ = value;
}

// optional bytes IDDrv = 3;
inline bool RecReg_General::has_iddrv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecReg_General::set_has_iddrv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecReg_General::clear_has_iddrv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecReg_General::clear_iddrv() {
  if (iddrv_ != &::google::protobuf::internal::kEmptyString) {
    iddrv_->clear();
  }
  clear_has_iddrv();
}
inline const ::std::string& RecReg_General::iddrv() const {
  return *iddrv_;
}
inline void RecReg_General::set_iddrv(const ::std::string& value) {
  set_has_iddrv();
  if (iddrv_ == &::google::protobuf::internal::kEmptyString) {
    iddrv_ = new ::std::string;
  }
  iddrv_->assign(value);
}
inline void RecReg_General::set_iddrv(const char* value) {
  set_has_iddrv();
  if (iddrv_ == &::google::protobuf::internal::kEmptyString) {
    iddrv_ = new ::std::string;
  }
  iddrv_->assign(value);
}
inline void RecReg_General::set_iddrv(const void* value, size_t size) {
  set_has_iddrv();
  if (iddrv_ == &::google::protobuf::internal::kEmptyString) {
    iddrv_ = new ::std::string;
  }
  iddrv_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecReg_General::mutable_iddrv() {
  set_has_iddrv();
  if (iddrv_ == &::google::protobuf::internal::kEmptyString) {
    iddrv_ = new ::std::string;
  }
  return iddrv_;
}
inline ::std::string* RecReg_General::release_iddrv() {
  clear_has_iddrv();
  if (iddrv_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = iddrv_;
    iddrv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 FLG = 4;
inline bool RecReg_General::has_flg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecReg_General::set_has_flg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecReg_General::clear_has_flg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecReg_General::clear_flg() {
  flg_ = 0u;
  clear_has_flg();
}
inline ::google::protobuf::uint32 RecReg_General::flg() const {
  return flg_;
}
inline void RecReg_General::set_flg(::google::protobuf::uint32 value) {
  set_has_flg();
  flg_ = value;
}

// optional uint32 Mileage = 5;
inline bool RecReg_General::has_mileage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecReg_General::set_has_mileage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecReg_General::clear_has_mileage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecReg_General::clear_mileage() {
  mileage_ = 0u;
  clear_has_mileage();
}
inline ::google::protobuf::uint32 RecReg_General::mileage() const {
  return mileage_;
}
inline void RecReg_General::set_mileage(::google::protobuf::uint32 value) {
  set_has_mileage();
  mileage_ = value;
}

// optional uint32 VImp = 6;
inline bool RecReg_General::has_vimp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecReg_General::set_has_vimp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecReg_General::clear_has_vimp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecReg_General::clear_vimp() {
  vimp_ = 0u;
  clear_has_vimp();
}
inline ::google::protobuf::uint32 RecReg_General::vimp() const {
  return vimp_;
}
inline void RecReg_General::set_vimp(::google::protobuf::uint32 value) {
  set_has_vimp();
  vimp_ = value;
}

// optional uint32 TImp = 7;
inline bool RecReg_General::has_timp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecReg_General::set_has_timp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RecReg_General::clear_has_timp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RecReg_General::clear_timp() {
  timp_ = 0u;
  clear_has_timp();
}
inline ::google::protobuf::uint32 RecReg_General::timp() const {
  return timp_;
}
inline void RecReg_General::set_timp(::google::protobuf::uint32 value) {
  set_has_timp();
  timp_ = value;
}

// optional uint32 Uboard = 8;
inline bool RecReg_General::has_uboard() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RecReg_General::set_has_uboard() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RecReg_General::clear_has_uboard() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RecReg_General::clear_uboard() {
  uboard_ = 0u;
  clear_has_uboard();
}
inline ::google::protobuf::uint32 RecReg_General::uboard() const {
  return uboard_;
}
inline void RecReg_General::set_uboard(::google::protobuf::uint32 value) {
  set_has_uboard();
  uboard_ = value;
}

// optional uint32 BatLife = 9;
inline bool RecReg_General::has_batlife() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RecReg_General::set_has_batlife() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RecReg_General::clear_has_batlife() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RecReg_General::clear_batlife() {
  batlife_ = 0u;
  clear_has_batlife();
}
inline ::google::protobuf::uint32 RecReg_General::batlife() const {
  return batlife_;
}
inline void RecReg_General::set_batlife(::google::protobuf::uint32 value) {
  set_has_batlife();
  batlife_ = value;
}

// optional sint32 SumAcc = 10;
inline bool RecReg_General::has_sumacc() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RecReg_General::set_has_sumacc() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RecReg_General::clear_has_sumacc() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RecReg_General::clear_sumacc() {
  sumacc_ = 0;
  clear_has_sumacc();
}
inline ::google::protobuf::int32 RecReg_General::sumacc() const {
  return sumacc_;
}
inline void RecReg_General::set_sumacc(::google::protobuf::int32 value) {
  set_has_sumacc();
  sumacc_ = value;
}

// optional bytes Phone = 11;
inline bool RecReg_General::has_phone() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RecReg_General::set_has_phone() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RecReg_General::clear_has_phone() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RecReg_General::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& RecReg_General::phone() const {
  return *phone_;
}
inline void RecReg_General::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void RecReg_General::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void RecReg_General::set_phone(const void* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecReg_General::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* RecReg_General::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional sint32 AmtrX = 12;
inline bool RecReg_General::has_amtrx() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RecReg_General::set_has_amtrx() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RecReg_General::clear_has_amtrx() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RecReg_General::clear_amtrx() {
  amtrx_ = 0;
  clear_has_amtrx();
}
inline ::google::protobuf::int32 RecReg_General::amtrx() const {
  return amtrx_;
}
inline void RecReg_General::set_amtrx(::google::protobuf::int32 value) {
  set_has_amtrx();
  amtrx_ = value;
}

// optional sint32 AmtrY = 13;
inline bool RecReg_General::has_amtry() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RecReg_General::set_has_amtry() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RecReg_General::clear_has_amtry() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RecReg_General::clear_amtry() {
  amtry_ = 0;
  clear_has_amtry();
}
inline ::google::protobuf::int32 RecReg_General::amtry() const {
  return amtry_;
}
inline void RecReg_General::set_amtry(::google::protobuf::int32 value) {
  set_has_amtry();
  amtry_ = value;
}

// optional sint32 AmtrZ = 14;
inline bool RecReg_General::has_amtrz() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RecReg_General::set_has_amtrz() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RecReg_General::clear_has_amtrz() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RecReg_General::clear_amtrz() {
  amtrz_ = 0;
  clear_has_amtrz();
}
inline ::google::protobuf::int32 RecReg_General::amtrz() const {
  return amtrz_;
}
inline void RecReg_General::set_amtrz(::google::protobuf::int32 value) {
  set_has_amtrz();
  amtrz_ = value;
}

// -------------------------------------------------------------------

// RecReg_Photo

// optional uint32 POSBLK = 1;
inline bool RecReg_Photo::has_posblk() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecReg_Photo::set_has_posblk() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecReg_Photo::clear_has_posblk() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecReg_Photo::clear_posblk() {
  posblk_ = 0u;
  clear_has_posblk();
}
inline ::google::protobuf::uint32 RecReg_Photo::posblk() const {
  return posblk_;
}
inline void RecReg_Photo::set_posblk(::google::protobuf::uint32 value) {
  set_has_posblk();
  posblk_ = value;
}

// optional uint32 SZPHOTO = 2;
inline bool RecReg_Photo::has_szphoto() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecReg_Photo::set_has_szphoto() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecReg_Photo::clear_has_szphoto() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecReg_Photo::clear_szphoto() {
  szphoto_ = 0u;
  clear_has_szphoto();
}
inline ::google::protobuf::uint32 RecReg_Photo::szphoto() const {
  return szphoto_;
}
inline void RecReg_Photo::set_szphoto(::google::protobuf::uint32 value) {
  set_has_szphoto();
  szphoto_ = value;
}

// optional uint32 SIZE = 3;
inline bool RecReg_Photo::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecReg_Photo::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecReg_Photo::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecReg_Photo::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 RecReg_Photo::size() const {
  return size_;
}
inline void RecReg_Photo::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
}

// optional bytes BUF = 4;
inline bool RecReg_Photo::has_buf() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecReg_Photo::set_has_buf() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecReg_Photo::clear_has_buf() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecReg_Photo::clear_buf() {
  if (buf_ != &::google::protobuf::internal::kEmptyString) {
    buf_->clear();
  }
  clear_has_buf();
}
inline const ::std::string& RecReg_Photo::buf() const {
  return *buf_;
}
inline void RecReg_Photo::set_buf(const ::std::string& value) {
  set_has_buf();
  if (buf_ == &::google::protobuf::internal::kEmptyString) {
    buf_ = new ::std::string;
  }
  buf_->assign(value);
}
inline void RecReg_Photo::set_buf(const char* value) {
  set_has_buf();
  if (buf_ == &::google::protobuf::internal::kEmptyString) {
    buf_ = new ::std::string;
  }
  buf_->assign(value);
}
inline void RecReg_Photo::set_buf(const void* value, size_t size) {
  set_has_buf();
  if (buf_ == &::google::protobuf::internal::kEmptyString) {
    buf_ = new ::std::string;
  }
  buf_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecReg_Photo::mutable_buf() {
  set_has_buf();
  if (buf_ == &::google::protobuf::internal::kEmptyString) {
    buf_ = new ::std::string;
  }
  return buf_;
}
inline ::std::string* RecReg_Photo::release_buf() {
  clear_has_buf();
  if (buf_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = buf_;
    buf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 IDPH = 5;
inline bool RecReg_Photo::has_idph() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecReg_Photo::set_has_idph() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecReg_Photo::clear_has_idph() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecReg_Photo::clear_idph() {
  idph_ = 0u;
  clear_has_idph();
}
inline ::google::protobuf::uint32 RecReg_Photo::idph() const {
  return idph_;
}
inline void RecReg_Photo::set_idph(::google::protobuf::uint32 value) {
  set_has_idph();
  idph_ = value;
}

// optional uint32 IMGSTAT = 6;
inline bool RecReg_Photo::has_imgstat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecReg_Photo::set_has_imgstat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecReg_Photo::clear_has_imgstat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecReg_Photo::clear_imgstat() {
  imgstat_ = 0u;
  clear_has_imgstat();
}
inline ::google::protobuf::uint32 RecReg_Photo::imgstat() const {
  return imgstat_;
}
inline void RecReg_Photo::set_imgstat(::google::protobuf::uint32 value) {
  set_has_imgstat();
  imgstat_ = value;
}

// -------------------------------------------------------------------

// RecReg_NAV

// required sint32 LAT = 1;
inline bool RecReg_NAV::has_lat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecReg_NAV::set_has_lat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecReg_NAV::clear_has_lat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecReg_NAV::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline ::google::protobuf::int32 RecReg_NAV::lat() const {
  return lat_;
}
inline void RecReg_NAV::set_lat(::google::protobuf::int32 value) {
  set_has_lat();
  lat_ = value;
}

// required sint32 LON = 2;
inline bool RecReg_NAV::has_lon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecReg_NAV::set_has_lon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecReg_NAV::clear_has_lon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecReg_NAV::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
inline ::google::protobuf::int32 RecReg_NAV::lon() const {
  return lon_;
}
inline void RecReg_NAV::set_lon(::google::protobuf::int32 value) {
  set_has_lon();
  lon_ = value;
}

// required uint32 GPSVel = 3;
inline bool RecReg_NAV::has_gpsvel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecReg_NAV::set_has_gpsvel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecReg_NAV::clear_has_gpsvel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecReg_NAV::clear_gpsvel() {
  gpsvel_ = 0u;
  clear_has_gpsvel();
}
inline ::google::protobuf::uint32 RecReg_NAV::gpsvel() const {
  return gpsvel_;
}
inline void RecReg_NAV::set_gpsvel(::google::protobuf::uint32 value) {
  set_has_gpsvel();
  gpsvel_ = value;
}

// required uint32 GPSDir = 4;
inline bool RecReg_NAV::has_gpsdir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecReg_NAV::set_has_gpsdir() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecReg_NAV::clear_has_gpsdir() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecReg_NAV::clear_gpsdir() {
  gpsdir_ = 0u;
  clear_has_gpsdir();
}
inline ::google::protobuf::uint32 RecReg_NAV::gpsdir() const {
  return gpsdir_;
}
inline void RecReg_NAV::set_gpsdir(::google::protobuf::uint32 value) {
  set_has_gpsdir();
  gpsdir_ = value;
}

// required uint32 GPSNSat = 5;
inline bool RecReg_NAV::has_gpsnsat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecReg_NAV::set_has_gpsnsat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecReg_NAV::clear_has_gpsnsat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecReg_NAV::clear_gpsnsat() {
  gpsnsat_ = 0u;
  clear_has_gpsnsat();
}
inline ::google::protobuf::uint32 RecReg_NAV::gpsnsat() const {
  return gpsnsat_;
}
inline void RecReg_NAV::set_gpsnsat(::google::protobuf::uint32 value) {
  set_has_gpsnsat();
  gpsnsat_ = value;
}

// required sint32 GPSAlt = 6;
inline bool RecReg_NAV::has_gpsalt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecReg_NAV::set_has_gpsalt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecReg_NAV::clear_has_gpsalt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecReg_NAV::clear_gpsalt() {
  gpsalt_ = 0;
  clear_has_gpsalt();
}
inline ::google::protobuf::int32 RecReg_NAV::gpsalt() const {
  return gpsalt_;
}
inline void RecReg_NAV::set_gpsalt(::google::protobuf::int32 value) {
  set_has_gpsalt();
  gpsalt_ = value;
}

// -------------------------------------------------------------------

// RecReg_UniDt

// optional sint32 UniVal0 = 1;
inline bool RecReg_UniDt::has_unival0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecReg_UniDt::set_has_unival0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecReg_UniDt::clear_has_unival0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecReg_UniDt::clear_unival0() {
  unival0_ = 0;
  clear_has_unival0();
}
inline ::google::protobuf::int32 RecReg_UniDt::unival0() const {
  return unival0_;
}
inline void RecReg_UniDt::set_unival0(::google::protobuf::int32 value) {
  set_has_unival0();
  unival0_ = value;
}

// optional sint32 UniVal1 = 2;
inline bool RecReg_UniDt::has_unival1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecReg_UniDt::set_has_unival1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecReg_UniDt::clear_has_unival1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecReg_UniDt::clear_unival1() {
  unival1_ = 0;
  clear_has_unival1();
}
inline ::google::protobuf::int32 RecReg_UniDt::unival1() const {
  return unival1_;
}
inline void RecReg_UniDt::set_unival1(::google::protobuf::int32 value) {
  set_has_unival1();
  unival1_ = value;
}

// optional sint32 UniVal2 = 3;
inline bool RecReg_UniDt::has_unival2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecReg_UniDt::set_has_unival2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecReg_UniDt::clear_has_unival2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecReg_UniDt::clear_unival2() {
  unival2_ = 0;
  clear_has_unival2();
}
inline ::google::protobuf::int32 RecReg_UniDt::unival2() const {
  return unival2_;
}
inline void RecReg_UniDt::set_unival2(::google::protobuf::int32 value) {
  set_has_unival2();
  unival2_ = value;
}

// optional sint32 UniVal3 = 4;
inline bool RecReg_UniDt::has_unival3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecReg_UniDt::set_has_unival3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecReg_UniDt::clear_has_unival3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecReg_UniDt::clear_unival3() {
  unival3_ = 0;
  clear_has_unival3();
}
inline ::google::protobuf::int32 RecReg_UniDt::unival3() const {
  return unival3_;
}
inline void RecReg_UniDt::set_unival3(::google::protobuf::int32 value) {
  set_has_unival3();
  unival3_ = value;
}

// -------------------------------------------------------------------

// RecReg_CanDt

// optional uint32 SPN70 = 70;
inline bool RecReg_CanDt::has_spn70() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecReg_CanDt::set_has_spn70() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecReg_CanDt::clear_has_spn70() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecReg_CanDt::clear_spn70() {
  spn70_ = 0u;
  clear_has_spn70();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn70() const {
  return spn70_;
}
inline void RecReg_CanDt::set_spn70(::google::protobuf::uint32 value) {
  set_has_spn70();
  spn70_ = value;
}

// optional uint32 SPN91 = 91;
inline bool RecReg_CanDt::has_spn91() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecReg_CanDt::set_has_spn91() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecReg_CanDt::clear_has_spn91() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecReg_CanDt::clear_spn91() {
  spn91_ = 0u;
  clear_has_spn91();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn91() const {
  return spn91_;
}
inline void RecReg_CanDt::set_spn91(::google::protobuf::uint32 value) {
  set_has_spn91();
  spn91_ = value;
}

// optional uint32 SPN100 = 100;
inline bool RecReg_CanDt::has_spn100() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecReg_CanDt::set_has_spn100() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecReg_CanDt::clear_has_spn100() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecReg_CanDt::clear_spn100() {
  spn100_ = 0u;
  clear_has_spn100();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn100() const {
  return spn100_;
}
inline void RecReg_CanDt::set_spn100(::google::protobuf::uint32 value) {
  set_has_spn100();
  spn100_ = value;
}

// optional uint32 SPN110 = 110;
inline bool RecReg_CanDt::has_spn110() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecReg_CanDt::set_has_spn110() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecReg_CanDt::clear_has_spn110() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecReg_CanDt::clear_spn110() {
  spn110_ = 0u;
  clear_has_spn110();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn110() const {
  return spn110_;
}
inline void RecReg_CanDt::set_spn110(::google::protobuf::uint32 value) {
  set_has_spn110();
  spn110_ = value;
}

// optional uint32 SPN174 = 174;
inline bool RecReg_CanDt::has_spn174() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecReg_CanDt::set_has_spn174() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecReg_CanDt::clear_has_spn174() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecReg_CanDt::clear_spn174() {
  spn174_ = 0u;
  clear_has_spn174();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn174() const {
  return spn174_;
}
inline void RecReg_CanDt::set_spn174(::google::protobuf::uint32 value) {
  set_has_spn174();
  spn174_ = value;
}

// optional uint32 SPN175 = 175;
inline bool RecReg_CanDt::has_spn175() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecReg_CanDt::set_has_spn175() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecReg_CanDt::clear_has_spn175() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecReg_CanDt::clear_spn175() {
  spn175_ = 0u;
  clear_has_spn175();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn175() const {
  return spn175_;
}
inline void RecReg_CanDt::set_spn175(::google::protobuf::uint32 value) {
  set_has_spn175();
  spn175_ = value;
}

// optional uint32 SPN182 = 182;
inline bool RecReg_CanDt::has_spn182() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecReg_CanDt::set_has_spn182() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RecReg_CanDt::clear_has_spn182() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RecReg_CanDt::clear_spn182() {
  spn182_ = 0u;
  clear_has_spn182();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn182() const {
  return spn182_;
}
inline void RecReg_CanDt::set_spn182(::google::protobuf::uint32 value) {
  set_has_spn182();
  spn182_ = value;
}

// optional uint32 SPN184 = 184;
inline bool RecReg_CanDt::has_spn184() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RecReg_CanDt::set_has_spn184() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RecReg_CanDt::clear_has_spn184() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RecReg_CanDt::clear_spn184() {
  spn184_ = 0u;
  clear_has_spn184();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn184() const {
  return spn184_;
}
inline void RecReg_CanDt::set_spn184(::google::protobuf::uint32 value) {
  set_has_spn184();
  spn184_ = value;
}

// optional uint32 SPN190 = 190;
inline bool RecReg_CanDt::has_spn190() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RecReg_CanDt::set_has_spn190() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RecReg_CanDt::clear_has_spn190() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RecReg_CanDt::clear_spn190() {
  spn190_ = 0u;
  clear_has_spn190();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn190() const {
  return spn190_;
}
inline void RecReg_CanDt::set_spn190(::google::protobuf::uint32 value) {
  set_has_spn190();
  spn190_ = value;
}

// optional uint32 SPN244 = 244;
inline bool RecReg_CanDt::has_spn244() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RecReg_CanDt::set_has_spn244() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RecReg_CanDt::clear_has_spn244() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RecReg_CanDt::clear_spn244() {
  spn244_ = 0u;
  clear_has_spn244();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn244() const {
  return spn244_;
}
inline void RecReg_CanDt::set_spn244(::google::protobuf::uint32 value) {
  set_has_spn244();
  spn244_ = value;
}

// optional uint32 SPN245 = 245;
inline bool RecReg_CanDt::has_spn245() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RecReg_CanDt::set_has_spn245() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RecReg_CanDt::clear_has_spn245() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RecReg_CanDt::clear_spn245() {
  spn245_ = 0u;
  clear_has_spn245();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn245() const {
  return spn245_;
}
inline void RecReg_CanDt::set_spn245(::google::protobuf::uint32 value) {
  set_has_spn245();
  spn245_ = value;
}

// optional uint32 SPN247 = 247;
inline bool RecReg_CanDt::has_spn247() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RecReg_CanDt::set_has_spn247() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RecReg_CanDt::clear_has_spn247() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RecReg_CanDt::clear_spn247() {
  spn247_ = 0u;
  clear_has_spn247();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn247() const {
  return spn247_;
}
inline void RecReg_CanDt::set_spn247(::google::protobuf::uint32 value) {
  set_has_spn247();
  spn247_ = value;
}

// optional uint32 SPN250 = 250;
inline bool RecReg_CanDt::has_spn250() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RecReg_CanDt::set_has_spn250() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RecReg_CanDt::clear_has_spn250() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RecReg_CanDt::clear_spn250() {
  spn250_ = 0u;
  clear_has_spn250();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn250() const {
  return spn250_;
}
inline void RecReg_CanDt::set_spn250(::google::protobuf::uint32 value) {
  set_has_spn250();
  spn250_ = value;
}

// optional uint32 SPN521 = 521;
inline bool RecReg_CanDt::has_spn521() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RecReg_CanDt::set_has_spn521() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RecReg_CanDt::clear_has_spn521() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RecReg_CanDt::clear_spn521() {
  spn521_ = 0u;
  clear_has_spn521();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn521() const {
  return spn521_;
}
inline void RecReg_CanDt::set_spn521(::google::protobuf::uint32 value) {
  set_has_spn521();
  spn521_ = value;
}

// optional uint32 SPN522 = 522;
inline bool RecReg_CanDt::has_spn522() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RecReg_CanDt::set_has_spn522() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RecReg_CanDt::clear_has_spn522() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RecReg_CanDt::clear_spn522() {
  spn522_ = 0u;
  clear_has_spn522();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn522() const {
  return spn522_;
}
inline void RecReg_CanDt::set_spn522(::google::protobuf::uint32 value) {
  set_has_spn522();
  spn522_ = value;
}

// optional uint32 SPN527 = 527;
inline bool RecReg_CanDt::has_spn527() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RecReg_CanDt::set_has_spn527() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RecReg_CanDt::clear_has_spn527() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RecReg_CanDt::clear_spn527() {
  spn527_ = 0u;
  clear_has_spn527();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn527() const {
  return spn527_;
}
inline void RecReg_CanDt::set_spn527(::google::protobuf::uint32 value) {
  set_has_spn527();
  spn527_ = value;
}

// repeated uint32 SPN582 = 582 [packed = true];
inline int RecReg_CanDt::spn582_size() const {
  return spn582_.size();
}
inline void RecReg_CanDt::clear_spn582() {
  spn582_.Clear();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn582(int index) const {
  return spn582_.Get(index);
}
inline void RecReg_CanDt::set_spn582(int index, ::google::protobuf::uint32 value) {
  spn582_.Set(index, value);
}
inline void RecReg_CanDt::add_spn582(::google::protobuf::uint32 value) {
  spn582_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RecReg_CanDt::spn582() const {
  return spn582_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RecReg_CanDt::mutable_spn582() {
  return &spn582_;
}

// optional uint32 SPN597 = 597;
inline bool RecReg_CanDt::has_spn597() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RecReg_CanDt::set_has_spn597() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RecReg_CanDt::clear_has_spn597() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RecReg_CanDt::clear_spn597() {
  spn597_ = 0u;
  clear_has_spn597();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn597() const {
  return spn597_;
}
inline void RecReg_CanDt::set_spn597(::google::protobuf::uint32 value) {
  set_has_spn597();
  spn597_ = value;
}

// optional uint32 SPN598 = 598;
inline bool RecReg_CanDt::has_spn598() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RecReg_CanDt::set_has_spn598() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RecReg_CanDt::clear_has_spn598() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RecReg_CanDt::clear_spn598() {
  spn598_ = 0u;
  clear_has_spn598();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn598() const {
  return spn598_;
}
inline void RecReg_CanDt::set_spn598(::google::protobuf::uint32 value) {
  set_has_spn598();
  spn598_ = value;
}

// optional uint32 SPN914 = 914;
inline bool RecReg_CanDt::has_spn914() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RecReg_CanDt::set_has_spn914() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RecReg_CanDt::clear_has_spn914() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RecReg_CanDt::clear_spn914() {
  spn914_ = 0u;
  clear_has_spn914();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn914() const {
  return spn914_;
}
inline void RecReg_CanDt::set_spn914(::google::protobuf::uint32 value) {
  set_has_spn914();
  spn914_ = value;
}

// optional uint32 SPN916 = 916;
inline bool RecReg_CanDt::has_spn916() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RecReg_CanDt::set_has_spn916() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RecReg_CanDt::clear_has_spn916() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RecReg_CanDt::clear_spn916() {
  spn916_ = 0u;
  clear_has_spn916();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn916() const {
  return spn916_;
}
inline void RecReg_CanDt::set_spn916(::google::protobuf::uint32 value) {
  set_has_spn916();
  spn916_ = value;
}

// repeated uint32 SPN928 = 928 [packed = true];
inline int RecReg_CanDt::spn928_size() const {
  return spn928_.size();
}
inline void RecReg_CanDt::clear_spn928() {
  spn928_.Clear();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn928(int index) const {
  return spn928_.Get(index);
}
inline void RecReg_CanDt::set_spn928(int index, ::google::protobuf::uint32 value) {
  spn928_.Set(index, value);
}
inline void RecReg_CanDt::add_spn928(::google::protobuf::uint32 value) {
  spn928_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RecReg_CanDt::spn928() const {
  return spn928_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RecReg_CanDt::mutable_spn928() {
  return &spn928_;
}

// optional uint32 SPN1624 = 1624;
inline bool RecReg_CanDt::has_spn1624() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void RecReg_CanDt::set_has_spn1624() {
  _has_bits_[0] |= 0x00400000u;
}
inline void RecReg_CanDt::clear_has_spn1624() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void RecReg_CanDt::clear_spn1624() {
  spn1624_ = 0u;
  clear_has_spn1624();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn1624() const {
  return spn1624_;
}
inline void RecReg_CanDt::set_spn1624(::google::protobuf::uint32 value) {
  set_has_spn1624();
  spn1624_ = value;
}

// optional uint32 SPN1821 = 1821;
inline bool RecReg_CanDt::has_spn1821() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void RecReg_CanDt::set_has_spn1821() {
  _has_bits_[0] |= 0x00800000u;
}
inline void RecReg_CanDt::clear_has_spn1821() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void RecReg_CanDt::clear_spn1821() {
  spn1821_ = 0u;
  clear_has_spn1821();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn1821() const {
  return spn1821_;
}
inline void RecReg_CanDt::set_spn1821(::google::protobuf::uint32 value) {
  set_has_spn1821();
  spn1821_ = value;
}

// optional uint32 SPN1856 = 1856;
inline bool RecReg_CanDt::has_spn1856() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void RecReg_CanDt::set_has_spn1856() {
  _has_bits_[0] |= 0x01000000u;
}
inline void RecReg_CanDt::clear_has_spn1856() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void RecReg_CanDt::clear_spn1856() {
  spn1856_ = 0u;
  clear_has_spn1856();
}
inline ::google::protobuf::uint32 RecReg_CanDt::spn1856() const {
  return spn1856_;
}
inline void RecReg_CanDt::set_spn1856(::google::protobuf::uint32 value) {
  set_has_spn1856();
  spn1856_ = value;
}

// -------------------------------------------------------------------

// RecReg_LLSDt

// optional sint32 TLLS1 = 1;
inline bool RecReg_LLSDt::has_tlls1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecReg_LLSDt::set_has_tlls1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecReg_LLSDt::clear_has_tlls1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecReg_LLSDt::clear_tlls1() {
  tlls1_ = 0;
  clear_has_tlls1();
}
inline ::google::protobuf::int32 RecReg_LLSDt::tlls1() const {
  return tlls1_;
}
inline void RecReg_LLSDt::set_tlls1(::google::protobuf::int32 value) {
  set_has_tlls1();
  tlls1_ = value;
}

// optional uint32 CLLS1 = 2;
inline bool RecReg_LLSDt::has_clls1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecReg_LLSDt::set_has_clls1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecReg_LLSDt::clear_has_clls1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecReg_LLSDt::clear_clls1() {
  clls1_ = 0u;
  clear_has_clls1();
}
inline ::google::protobuf::uint32 RecReg_LLSDt::clls1() const {
  return clls1_;
}
inline void RecReg_LLSDt::set_clls1(::google::protobuf::uint32 value) {
  set_has_clls1();
  clls1_ = value;
}

// optional sint32 FLLS1 = 3;
inline bool RecReg_LLSDt::has_flls1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecReg_LLSDt::set_has_flls1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecReg_LLSDt::clear_has_flls1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecReg_LLSDt::clear_flls1() {
  flls1_ = 0;
  clear_has_flls1();
}
inline ::google::protobuf::int32 RecReg_LLSDt::flls1() const {
  return flls1_;
}
inline void RecReg_LLSDt::set_flls1(::google::protobuf::int32 value) {
  set_has_flls1();
  flls1_ = value;
}

// optional sint32 TLLS2 = 4;
inline bool RecReg_LLSDt::has_tlls2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecReg_LLSDt::set_has_tlls2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecReg_LLSDt::clear_has_tlls2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecReg_LLSDt::clear_tlls2() {
  tlls2_ = 0;
  clear_has_tlls2();
}
inline ::google::protobuf::int32 RecReg_LLSDt::tlls2() const {
  return tlls2_;
}
inline void RecReg_LLSDt::set_tlls2(::google::protobuf::int32 value) {
  set_has_tlls2();
  tlls2_ = value;
}

// optional uint32 CLLS2 = 5;
inline bool RecReg_LLSDt::has_clls2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecReg_LLSDt::set_has_clls2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecReg_LLSDt::clear_has_clls2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecReg_LLSDt::clear_clls2() {
  clls2_ = 0u;
  clear_has_clls2();
}
inline ::google::protobuf::uint32 RecReg_LLSDt::clls2() const {
  return clls2_;
}
inline void RecReg_LLSDt::set_clls2(::google::protobuf::uint32 value) {
  set_has_clls2();
  clls2_ = value;
}

// optional sint32 FLLS2 = 6;
inline bool RecReg_LLSDt::has_flls2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecReg_LLSDt::set_has_flls2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecReg_LLSDt::clear_has_flls2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecReg_LLSDt::clear_flls2() {
  flls2_ = 0;
  clear_has_flls2();
}
inline ::google::protobuf::int32 RecReg_LLSDt::flls2() const {
  return flls2_;
}
inline void RecReg_LLSDt::set_flls2(::google::protobuf::int32 value) {
  set_has_flls2();
  flls2_ = value;
}

// optional sint32 TLLS3 = 7;
inline bool RecReg_LLSDt::has_tlls3() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecReg_LLSDt::set_has_tlls3() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RecReg_LLSDt::clear_has_tlls3() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RecReg_LLSDt::clear_tlls3() {
  tlls3_ = 0;
  clear_has_tlls3();
}
inline ::google::protobuf::int32 RecReg_LLSDt::tlls3() const {
  return tlls3_;
}
inline void RecReg_LLSDt::set_tlls3(::google::protobuf::int32 value) {
  set_has_tlls3();
  tlls3_ = value;
}

// optional uint32 CLLS3 = 8;
inline bool RecReg_LLSDt::has_clls3() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RecReg_LLSDt::set_has_clls3() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RecReg_LLSDt::clear_has_clls3() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RecReg_LLSDt::clear_clls3() {
  clls3_ = 0u;
  clear_has_clls3();
}
inline ::google::protobuf::uint32 RecReg_LLSDt::clls3() const {
  return clls3_;
}
inline void RecReg_LLSDt::set_clls3(::google::protobuf::uint32 value) {
  set_has_clls3();
  clls3_ = value;
}

// optional sint32 FLLS3 = 9;
inline bool RecReg_LLSDt::has_flls3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RecReg_LLSDt::set_has_flls3() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RecReg_LLSDt::clear_has_flls3() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RecReg_LLSDt::clear_flls3() {
  flls3_ = 0;
  clear_has_flls3();
}
inline ::google::protobuf::int32 RecReg_LLSDt::flls3() const {
  return flls3_;
}
inline void RecReg_LLSDt::set_flls3(::google::protobuf::int32 value) {
  set_has_flls3();
  flls3_ = value;
}

// optional sint32 TLLS4 = 10;
inline bool RecReg_LLSDt::has_tlls4() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RecReg_LLSDt::set_has_tlls4() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RecReg_LLSDt::clear_has_tlls4() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RecReg_LLSDt::clear_tlls4() {
  tlls4_ = 0;
  clear_has_tlls4();
}
inline ::google::protobuf::int32 RecReg_LLSDt::tlls4() const {
  return tlls4_;
}
inline void RecReg_LLSDt::set_tlls4(::google::protobuf::int32 value) {
  set_has_tlls4();
  tlls4_ = value;
}

// optional uint32 CLLS4 = 11;
inline bool RecReg_LLSDt::has_clls4() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RecReg_LLSDt::set_has_clls4() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RecReg_LLSDt::clear_has_clls4() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RecReg_LLSDt::clear_clls4() {
  clls4_ = 0u;
  clear_has_clls4();
}
inline ::google::protobuf::uint32 RecReg_LLSDt::clls4() const {
  return clls4_;
}
inline void RecReg_LLSDt::set_clls4(::google::protobuf::uint32 value) {
  set_has_clls4();
  clls4_ = value;
}

// optional sint32 FLLS4 = 12;
inline bool RecReg_LLSDt::has_flls4() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RecReg_LLSDt::set_has_flls4() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RecReg_LLSDt::clear_has_flls4() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RecReg_LLSDt::clear_flls4() {
  flls4_ = 0;
  clear_has_flls4();
}
inline ::google::protobuf::int32 RecReg_LLSDt::flls4() const {
  return flls4_;
}
inline void RecReg_LLSDt::set_flls4(::google::protobuf::int32 value) {
  set_has_flls4();
  flls4_ = value;
}

// optional sint32 TLLS5 = 13;
inline bool RecReg_LLSDt::has_tlls5() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RecReg_LLSDt::set_has_tlls5() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RecReg_LLSDt::clear_has_tlls5() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RecReg_LLSDt::clear_tlls5() {
  tlls5_ = 0;
  clear_has_tlls5();
}
inline ::google::protobuf::int32 RecReg_LLSDt::tlls5() const {
  return tlls5_;
}
inline void RecReg_LLSDt::set_tlls5(::google::protobuf::int32 value) {
  set_has_tlls5();
  tlls5_ = value;
}

// optional uint32 CLLS5 = 14;
inline bool RecReg_LLSDt::has_clls5() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RecReg_LLSDt::set_has_clls5() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RecReg_LLSDt::clear_has_clls5() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RecReg_LLSDt::clear_clls5() {
  clls5_ = 0u;
  clear_has_clls5();
}
inline ::google::protobuf::uint32 RecReg_LLSDt::clls5() const {
  return clls5_;
}
inline void RecReg_LLSDt::set_clls5(::google::protobuf::uint32 value) {
  set_has_clls5();
  clls5_ = value;
}

// optional sint32 FLLS5 = 15;
inline bool RecReg_LLSDt::has_flls5() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RecReg_LLSDt::set_has_flls5() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RecReg_LLSDt::clear_has_flls5() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RecReg_LLSDt::clear_flls5() {
  flls5_ = 0;
  clear_has_flls5();
}
inline ::google::protobuf::int32 RecReg_LLSDt::flls5() const {
  return flls5_;
}
inline void RecReg_LLSDt::set_flls5(::google::protobuf::int32 value) {
  set_has_flls5();
  flls5_ = value;
}

// optional sint32 TLLS6 = 16;
inline bool RecReg_LLSDt::has_tlls6() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RecReg_LLSDt::set_has_tlls6() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RecReg_LLSDt::clear_has_tlls6() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RecReg_LLSDt::clear_tlls6() {
  tlls6_ = 0;
  clear_has_tlls6();
}
inline ::google::protobuf::int32 RecReg_LLSDt::tlls6() const {
  return tlls6_;
}
inline void RecReg_LLSDt::set_tlls6(::google::protobuf::int32 value) {
  set_has_tlls6();
  tlls6_ = value;
}

// optional uint32 CLLS6 = 17;
inline bool RecReg_LLSDt::has_clls6() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RecReg_LLSDt::set_has_clls6() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RecReg_LLSDt::clear_has_clls6() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RecReg_LLSDt::clear_clls6() {
  clls6_ = 0u;
  clear_has_clls6();
}
inline ::google::protobuf::uint32 RecReg_LLSDt::clls6() const {
  return clls6_;
}
inline void RecReg_LLSDt::set_clls6(::google::protobuf::uint32 value) {
  set_has_clls6();
  clls6_ = value;
}

// optional uint32 FLLS6 = 18;
inline bool RecReg_LLSDt::has_flls6() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RecReg_LLSDt::set_has_flls6() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RecReg_LLSDt::clear_has_flls6() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RecReg_LLSDt::clear_flls6() {
  flls6_ = 0u;
  clear_has_flls6();
}
inline ::google::protobuf::uint32 RecReg_LLSDt::flls6() const {
  return flls6_;
}
inline void RecReg_LLSDt::set_flls6(::google::protobuf::uint32 value) {
  set_has_flls6();
  flls6_ = value;
}

// -------------------------------------------------------------------

// RecReg_LOG

// repeated string Debug = 1;
inline int RecReg_LOG::debug_size() const {
  return debug_.size();
}
inline void RecReg_LOG::clear_debug() {
  debug_.Clear();
}
inline const ::std::string& RecReg_LOG::debug(int index) const {
  return debug_.Get(index);
}
inline ::std::string* RecReg_LOG::mutable_debug(int index) {
  return debug_.Mutable(index);
}
inline void RecReg_LOG::set_debug(int index, const ::std::string& value) {
  debug_.Mutable(index)->assign(value);
}
inline void RecReg_LOG::set_debug(int index, const char* value) {
  debug_.Mutable(index)->assign(value);
}
inline void RecReg_LOG::set_debug(int index, const char* value, size_t size) {
  debug_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecReg_LOG::add_debug() {
  return debug_.Add();
}
inline void RecReg_LOG::add_debug(const ::std::string& value) {
  debug_.Add()->assign(value);
}
inline void RecReg_LOG::add_debug(const char* value) {
  debug_.Add()->assign(value);
}
inline void RecReg_LOG::add_debug(const char* value, size_t size) {
  debug_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RecReg_LOG::debug() const {
  return debug_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RecReg_LOG::mutable_debug() {
  return &debug_;
}

// -------------------------------------------------------------------

// RecReg

// repeated uint32 mID = 1 [packed = true];
inline int RecReg::mid_size() const {
  return mid_.size();
}
inline void RecReg::clear_mid() {
  mid_.Clear();
}
inline ::google::protobuf::uint32 RecReg::mid(int index) const {
  return mid_.Get(index);
}
inline void RecReg::set_mid(int index, ::google::protobuf::uint32 value) {
  mid_.Set(index, value);
}
inline void RecReg::add_mid(::google::protobuf::uint32 value) {
  mid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RecReg::mid() const {
  return mid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RecReg::mutable_mid() {
  return &mid_;
}

// optional group General = 2 {
inline bool RecReg::has_general() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecReg::set_has_general() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecReg::clear_has_general() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecReg::clear_general() {
  if (general_ != NULL) general_->::RecReg_General::Clear();
  clear_has_general();
}
inline const ::RecReg_General& RecReg::general() const {
  return general_ != NULL ? *general_ : *default_instance_->general_;
}
inline ::RecReg_General* RecReg::mutable_general() {
  set_has_general();
  if (general_ == NULL) general_ = new ::RecReg_General;
  return general_;
}
inline ::RecReg_General* RecReg::release_general() {
  clear_has_general();
  ::RecReg_General* temp = general_;
  general_ = NULL;
  return temp;
}

// optional group Photo = 4 {
inline bool RecReg::has_photo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecReg::set_has_photo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecReg::clear_has_photo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecReg::clear_photo() {
  if (photo_ != NULL) photo_->::RecReg_Photo::Clear();
  clear_has_photo();
}
inline const ::RecReg_Photo& RecReg::photo() const {
  return photo_ != NULL ? *photo_ : *default_instance_->photo_;
}
inline ::RecReg_Photo* RecReg::mutable_photo() {
  set_has_photo();
  if (photo_ == NULL) photo_ = new ::RecReg_Photo;
  return photo_;
}
inline ::RecReg_Photo* RecReg::release_photo() {
  clear_has_photo();
  ::RecReg_Photo* temp = photo_;
  photo_ = NULL;
  return temp;
}

// optional group NAV = 5 {
inline bool RecReg::has_nav() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecReg::set_has_nav() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecReg::clear_has_nav() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecReg::clear_nav() {
  if (nav_ != NULL) nav_->::RecReg_NAV::Clear();
  clear_has_nav();
}
inline const ::RecReg_NAV& RecReg::nav() const {
  return nav_ != NULL ? *nav_ : *default_instance_->nav_;
}
inline ::RecReg_NAV* RecReg::mutable_nav() {
  set_has_nav();
  if (nav_ == NULL) nav_ = new ::RecReg_NAV;
  return nav_;
}
inline ::RecReg_NAV* RecReg::release_nav() {
  clear_has_nav();
  ::RecReg_NAV* temp = nav_;
  nav_ = NULL;
  return temp;
}

// optional group UniDt = 6 {
inline bool RecReg::has_unidt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RecReg::set_has_unidt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RecReg::clear_has_unidt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RecReg::clear_unidt() {
  if (unidt_ != NULL) unidt_->::RecReg_UniDt::Clear();
  clear_has_unidt();
}
inline const ::RecReg_UniDt& RecReg::unidt() const {
  return unidt_ != NULL ? *unidt_ : *default_instance_->unidt_;
}
inline ::RecReg_UniDt* RecReg::mutable_unidt() {
  set_has_unidt();
  if (unidt_ == NULL) unidt_ = new ::RecReg_UniDt;
  return unidt_;
}
inline ::RecReg_UniDt* RecReg::release_unidt() {
  clear_has_unidt();
  ::RecReg_UniDt* temp = unidt_;
  unidt_ = NULL;
  return temp;
}

// optional group CanDt = 7 {
inline bool RecReg::has_candt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RecReg::set_has_candt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RecReg::clear_has_candt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RecReg::clear_candt() {
  if (candt_ != NULL) candt_->::RecReg_CanDt::Clear();
  clear_has_candt();
}
inline const ::RecReg_CanDt& RecReg::candt() const {
  return candt_ != NULL ? *candt_ : *default_instance_->candt_;
}
inline ::RecReg_CanDt* RecReg::mutable_candt() {
  set_has_candt();
  if (candt_ == NULL) candt_ = new ::RecReg_CanDt;
  return candt_;
}
inline ::RecReg_CanDt* RecReg::release_candt() {
  clear_has_candt();
  ::RecReg_CanDt* temp = candt_;
  candt_ = NULL;
  return temp;
}

// optional group LLSDt = 8 {
inline bool RecReg::has_llsdt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RecReg::set_has_llsdt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RecReg::clear_has_llsdt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RecReg::clear_llsdt() {
  if (llsdt_ != NULL) llsdt_->::RecReg_LLSDt::Clear();
  clear_has_llsdt();
}
inline const ::RecReg_LLSDt& RecReg::llsdt() const {
  return llsdt_ != NULL ? *llsdt_ : *default_instance_->llsdt_;
}
inline ::RecReg_LLSDt* RecReg::mutable_llsdt() {
  set_has_llsdt();
  if (llsdt_ == NULL) llsdt_ = new ::RecReg_LLSDt;
  return llsdt_;
}
inline ::RecReg_LLSDt* RecReg::release_llsdt() {
  clear_has_llsdt();
  ::RecReg_LLSDt* temp = llsdt_;
  llsdt_ = NULL;
  return temp;
}

// optional group LOG = 16 {
inline bool RecReg::has_log() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RecReg::set_has_log() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RecReg::clear_has_log() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RecReg::clear_log() {
  if (log_ != NULL) log_->::RecReg_LOG::Clear();
  clear_has_log();
}
inline const ::RecReg_LOG& RecReg::log() const {
  return log_ != NULL ? *log_ : *default_instance_->log_;
}
inline ::RecReg_LOG* RecReg::mutable_log() {
  set_has_log();
  if (log_ == NULL) log_ = new ::RecReg_LOG;
  return log_;
}
inline ::RecReg_LOG* RecReg::release_log() {
  clear_has_log();
  ::RecReg_LOG* temp = log_;
  log_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
