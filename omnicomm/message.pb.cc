// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RecReg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecReg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecReg_General_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecReg_General_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecReg_Photo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecReg_Photo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecReg_NAV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecReg_NAV_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecReg_UniDt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecReg_UniDt_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecReg_CanDt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecReg_CanDt_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecReg_LLSDt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecReg_LLSDt_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecReg_LOG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecReg_LOG_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  RecReg_descriptor_ = file->message_type(0);
  static const int RecReg_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg, general_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg, photo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg, nav_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg, unidt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg, candt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg, llsdt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg, log_),
  };
  RecReg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecReg_descriptor_,
      RecReg::default_instance_,
      RecReg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecReg));
  RecReg_General_descriptor_ = RecReg_descriptor_->nested_type(0);
  static const int RecReg_General_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_General, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_General, idfas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_General, iddrv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_General, flg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_General, mileage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_General, vimp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_General, timp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_General, uboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_General, batlife_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_General, sumacc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_General, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_General, amtrx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_General, amtry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_General, amtrz_),
  };
  RecReg_General_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecReg_General_descriptor_,
      RecReg_General::default_instance_,
      RecReg_General_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_General, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_General, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecReg_General));
  RecReg_Photo_descriptor_ = RecReg_descriptor_->nested_type(1);
  static const int RecReg_Photo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_Photo, posblk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_Photo, szphoto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_Photo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_Photo, buf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_Photo, idph_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_Photo, imgstat_),
  };
  RecReg_Photo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecReg_Photo_descriptor_,
      RecReg_Photo::default_instance_,
      RecReg_Photo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_Photo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_Photo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecReg_Photo));
  RecReg_NAV_descriptor_ = RecReg_descriptor_->nested_type(2);
  static const int RecReg_NAV_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_NAV, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_NAV, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_NAV, gpsvel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_NAV, gpsdir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_NAV, gpsnsat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_NAV, gpsalt_),
  };
  RecReg_NAV_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecReg_NAV_descriptor_,
      RecReg_NAV::default_instance_,
      RecReg_NAV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_NAV, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_NAV, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecReg_NAV));
  RecReg_UniDt_descriptor_ = RecReg_descriptor_->nested_type(3);
  static const int RecReg_UniDt_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_UniDt, unival0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_UniDt, unival1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_UniDt, unival2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_UniDt, unival3_),
  };
  RecReg_UniDt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecReg_UniDt_descriptor_,
      RecReg_UniDt::default_instance_,
      RecReg_UniDt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_UniDt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_UniDt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecReg_UniDt));
  RecReg_CanDt_descriptor_ = RecReg_descriptor_->nested_type(4);
  static const int RecReg_CanDt_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn70_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn91_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn100_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn110_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn174_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn175_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn182_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn184_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn190_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn244_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn245_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn247_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn250_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn521_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn522_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn527_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn582_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn597_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn598_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn914_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn916_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn928_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn1624_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn1821_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, spn1856_),
  };
  RecReg_CanDt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecReg_CanDt_descriptor_,
      RecReg_CanDt::default_instance_,
      RecReg_CanDt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_CanDt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecReg_CanDt));
  RecReg_LLSDt_descriptor_ = RecReg_descriptor_->nested_type(5);
  static const int RecReg_LLSDt_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_LLSDt, tlls1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_LLSDt, clls1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_LLSDt, flls1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_LLSDt, tlls2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_LLSDt, clls2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_LLSDt, flls2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_LLSDt, tlls3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_LLSDt, clls3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_LLSDt, flls3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_LLSDt, tlls4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_LLSDt, clls4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_LLSDt, flls4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_LLSDt, tlls5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_LLSDt, clls5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_LLSDt, flls5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_LLSDt, tlls6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_LLSDt, clls6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_LLSDt, flls6_),
  };
  RecReg_LLSDt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecReg_LLSDt_descriptor_,
      RecReg_LLSDt::default_instance_,
      RecReg_LLSDt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_LLSDt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_LLSDt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecReg_LLSDt));
  RecReg_LOG_descriptor_ = RecReg_descriptor_->nested_type(6);
  static const int RecReg_LOG_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_LOG, debug_),
  };
  RecReg_LOG_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecReg_LOG_descriptor_,
      RecReg_LOG::default_instance_,
      RecReg_LOG_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_LOG, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecReg_LOG, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecReg_LOG));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecReg_descriptor_, &RecReg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecReg_General_descriptor_, &RecReg_General::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecReg_Photo_descriptor_, &RecReg_Photo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecReg_NAV_descriptor_, &RecReg_NAV::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecReg_UniDt_descriptor_, &RecReg_UniDt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecReg_CanDt_descriptor_, &RecReg_CanDt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecReg_LLSDt_descriptor_, &RecReg_LLSDt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecReg_LOG_descriptor_, &RecReg_LOG::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete RecReg::default_instance_;
  delete RecReg_reflection_;
  delete RecReg_General::default_instance_;
  delete RecReg_General_reflection_;
  delete RecReg_Photo::default_instance_;
  delete RecReg_Photo_reflection_;
  delete RecReg_NAV::default_instance_;
  delete RecReg_NAV_reflection_;
  delete RecReg_UniDt::default_instance_;
  delete RecReg_UniDt_reflection_;
  delete RecReg_CanDt::default_instance_;
  delete RecReg_CanDt_reflection_;
  delete RecReg_LLSDt::default_instance_;
  delete RecReg_LLSDt_reflection_;
  delete RecReg_LOG::default_instance_;
  delete RecReg_LOG_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\"\277\013\n\006RecReg\022\017\n\003mID\030\001 \003(\rB"
    "\002\020\001\022 \n\007general\030\002 \001(\n2\017.RecReg.General\022\034\n"
    "\005photo\030\004 \001(\n2\r.RecReg.Photo\022\030\n\003nav\030\005 \001(\n"
    "2\013.RecReg.NAV\022\034\n\005unidt\030\006 \001(\n2\r.RecReg.Un"
    "iDt\022\034\n\005candt\030\007 \001(\n2\r.RecReg.CanDt\022\034\n\005lls"
    "dt\030\010 \001(\n2\r.RecReg.LLSDt\022\030\n\003log\030\020 \001(\n2\013.R"
    "ecReg.LOG\032\334\001\n\007General\022\014\n\004Time\030\001 \001(\r\022\r\n\005I"
    "DFAS\030\002 \001(\r\022\r\n\005IDDrv\030\003 \001(\014\022\013\n\003FLG\030\004 \001(\r\022\017"
    "\n\007Mileage\030\005 \001(\r\022\014\n\004VImp\030\006 \001(\r\022\014\n\004TImp\030\007 "
    "\001(\r\022\016\n\006Uboard\030\010 \001(\r\022\017\n\007BatLife\030\t \001(\r\022\016\n\006"
    "SumAcc\030\n \001(\021\022\r\n\005Phone\030\013 \001(\014\022\r\n\005AmtrX\030\014 \001"
    "(\021\022\r\n\005AmtrY\030\r \001(\021\022\r\n\005AmtrZ\030\016 \001(\021\032b\n\005Phot"
    "o\022\016\n\006POSBLK\030\001 \001(\r\022\017\n\007SZPHOTO\030\002 \001(\r\022\014\n\004SI"
    "ZE\030\003 \001(\r\022\013\n\003BUF\030\004 \001(\014\022\014\n\004IDPH\030\005 \001(\r\022\017\n\007I"
    "MGSTAT\030\006 \001(\r\032`\n\003NAV\022\013\n\003LAT\030\001 \002(\021\022\013\n\003LON\030"
    "\002 \002(\021\022\016\n\006GPSVel\030\003 \002(\r\022\016\n\006GPSDir\030\004 \002(\r\022\017\n"
    "\007GPSNSat\030\005 \002(\r\022\016\n\006GPSAlt\030\006 \002(\021\032K\n\005UniDt\022"
    "\017\n\007UniVal0\030\001 \001(\021\022\017\n\007UniVal1\030\002 \001(\021\022\017\n\007Uni"
    "Val2\030\003 \001(\021\022\017\n\007UniVal3\030\004 \001(\021\032\265\003\n\005CanDt\022\r\n"
    "\005SPN70\030F \001(\r\022\r\n\005SPN91\030[ \001(\r\022\016\n\006SPN100\030d "
    "\001(\r\022\016\n\006SPN110\030n \001(\r\022\017\n\006SPN174\030\256\001 \001(\r\022\017\n\006"
    "SPN175\030\257\001 \001(\r\022\017\n\006SPN182\030\266\001 \001(\r\022\017\n\006SPN184"
    "\030\270\001 \001(\r\022\017\n\006SPN190\030\276\001 \001(\r\022\017\n\006SPN244\030\364\001 \001("
    "\r\022\017\n\006SPN245\030\365\001 \001(\r\022\017\n\006SPN247\030\367\001 \001(\r\022\017\n\006S"
    "PN250\030\372\001 \001(\r\022\017\n\006SPN521\030\211\004 \001(\r\022\017\n\006SPN522\030"
    "\212\004 \001(\r\022\017\n\006SPN527\030\217\004 \001(\r\022\023\n\006SPN582\030\306\004 \003(\r"
    "B\002\020\001\022\017\n\006SPN597\030\325\004 \001(\r\022\017\n\006SPN598\030\326\004 \001(\r\022\017"
    "\n\006SPN914\030\222\007 \001(\r\022\017\n\006SPN916\030\224\007 \001(\r\022\023\n\006SPN9"
    "28\030\240\007 \003(\rB\002\020\001\022\020\n\007SPN1624\030\330\014 \001(\r\022\020\n\007SPN18"
    "21\030\235\016 \001(\r\022\020\n\007SPN1856\030\300\016 \001(\r\032\225\002\n\005LLSDt\022\r\n"
    "\005TLLS1\030\001 \001(\021\022\r\n\005CLLS1\030\002 \001(\r\022\r\n\005FLLS1\030\003 \001"
    "(\021\022\r\n\005TLLS2\030\004 \001(\021\022\r\n\005CLLS2\030\005 \001(\r\022\r\n\005FLLS"
    "2\030\006 \001(\021\022\r\n\005TLLS3\030\007 \001(\021\022\r\n\005CLLS3\030\010 \001(\r\022\r\n"
    "\005FLLS3\030\t \001(\021\022\r\n\005TLLS4\030\n \001(\021\022\r\n\005CLLS4\030\013 \001"
    "(\r\022\r\n\005FLLS4\030\014 \001(\021\022\r\n\005TLLS5\030\r \001(\021\022\r\n\005CLLS"
    "5\030\016 \001(\r\022\r\n\005FLLS5\030\017 \001(\021\022\r\n\005TLLS6\030\020 \001(\021\022\r\n"
    "\005CLLS6\030\021 \001(\r\022\r\n\005FLLS6\030\022 \001(\r\032\024\n\003LOG\022\r\n\005De"
    "bug\030\001 \003(\t", 1489);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  RecReg::default_instance_ = new RecReg();
  RecReg_General::default_instance_ = new RecReg_General();
  RecReg_Photo::default_instance_ = new RecReg_Photo();
  RecReg_NAV::default_instance_ = new RecReg_NAV();
  RecReg_UniDt::default_instance_ = new RecReg_UniDt();
  RecReg_CanDt::default_instance_ = new RecReg_CanDt();
  RecReg_LLSDt::default_instance_ = new RecReg_LLSDt();
  RecReg_LOG::default_instance_ = new RecReg_LOG();
  RecReg::default_instance_->InitAsDefaultInstance();
  RecReg_General::default_instance_->InitAsDefaultInstance();
  RecReg_Photo::default_instance_->InitAsDefaultInstance();
  RecReg_NAV::default_instance_->InitAsDefaultInstance();
  RecReg_UniDt::default_instance_->InitAsDefaultInstance();
  RecReg_CanDt::default_instance_->InitAsDefaultInstance();
  RecReg_LLSDt::default_instance_->InitAsDefaultInstance();
  RecReg_LOG::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RecReg_General::kTimeFieldNumber;
const int RecReg_General::kIDFASFieldNumber;
const int RecReg_General::kIDDrvFieldNumber;
const int RecReg_General::kFLGFieldNumber;
const int RecReg_General::kMileageFieldNumber;
const int RecReg_General::kVImpFieldNumber;
const int RecReg_General::kTImpFieldNumber;
const int RecReg_General::kUboardFieldNumber;
const int RecReg_General::kBatLifeFieldNumber;
const int RecReg_General::kSumAccFieldNumber;
const int RecReg_General::kPhoneFieldNumber;
const int RecReg_General::kAmtrXFieldNumber;
const int RecReg_General::kAmtrYFieldNumber;
const int RecReg_General::kAmtrZFieldNumber;
#endif  // !_MSC_VER

RecReg_General::RecReg_General()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecReg_General::InitAsDefaultInstance() {
}

RecReg_General::RecReg_General(const RecReg_General& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecReg_General::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  idfas_ = 0u;
  iddrv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flg_ = 0u;
  mileage_ = 0u;
  vimp_ = 0u;
  timp_ = 0u;
  uboard_ = 0u;
  batlife_ = 0u;
  sumacc_ = 0;
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amtrx_ = 0;
  amtry_ = 0;
  amtrz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecReg_General::~RecReg_General() {
  SharedDtor();
}

void RecReg_General::SharedDtor() {
  if (iddrv_ != &::google::protobuf::internal::kEmptyString) {
    delete iddrv_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (this != default_instance_) {
  }
}

void RecReg_General::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecReg_General::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecReg_General_descriptor_;
}

const RecReg_General& RecReg_General::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RecReg_General* RecReg_General::default_instance_ = NULL;

RecReg_General* RecReg_General::New() const {
  return new RecReg_General;
}

void RecReg_General::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    idfas_ = 0u;
    if (has_iddrv()) {
      if (iddrv_ != &::google::protobuf::internal::kEmptyString) {
        iddrv_->clear();
      }
    }
    flg_ = 0u;
    mileage_ = 0u;
    vimp_ = 0u;
    timp_ = 0u;
    uboard_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    batlife_ = 0u;
    sumacc_ = 0;
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    amtrx_ = 0;
    amtry_ = 0;
    amtrz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecReg_General::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IDFAS;
        break;
      }

      // optional uint32 IDFAS = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IDFAS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idfas_)));
          set_has_idfas();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_IDDrv;
        break;
      }

      // optional bytes IDDrv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IDDrv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_iddrv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_FLG;
        break;
      }

      // optional uint32 FLG = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FLG:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flg_)));
          set_has_flg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Mileage;
        break;
      }

      // optional uint32 Mileage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Mileage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mileage_)));
          set_has_mileage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_VImp;
        break;
      }

      // optional uint32 VImp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VImp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vimp_)));
          set_has_vimp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_TImp;
        break;
      }

      // optional uint32 TImp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TImp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timp_)));
          set_has_timp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Uboard;
        break;
      }

      // optional uint32 Uboard = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Uboard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uboard_)));
          set_has_uboard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_BatLife;
        break;
      }

      // optional uint32 BatLife = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BatLife:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batlife_)));
          set_has_batlife();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_SumAcc;
        break;
      }

      // optional sint32 SumAcc = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SumAcc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sumacc_)));
          set_has_sumacc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_Phone;
        break;
      }

      // optional bytes Phone = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phone()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_AmtrX;
        break;
      }

      // optional sint32 AmtrX = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AmtrX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &amtrx_)));
          set_has_amtrx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_AmtrY;
        break;
      }

      // optional sint32 AmtrY = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AmtrY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &amtry_)));
          set_has_amtry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_AmtrZ;
        break;
      }

      // optional sint32 AmtrZ = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AmtrZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &amtrz_)));
          set_has_amtrz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecReg_General::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 Time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional uint32 IDFAS = 2;
  if (has_idfas()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->idfas(), output);
  }

  // optional bytes IDDrv = 3;
  if (has_iddrv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->iddrv(), output);
  }

  // optional uint32 FLG = 4;
  if (has_flg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flg(), output);
  }

  // optional uint32 Mileage = 5;
  if (has_mileage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mileage(), output);
  }

  // optional uint32 VImp = 6;
  if (has_vimp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->vimp(), output);
  }

  // optional uint32 TImp = 7;
  if (has_timp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->timp(), output);
  }

  // optional uint32 Uboard = 8;
  if (has_uboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->uboard(), output);
  }

  // optional uint32 BatLife = 9;
  if (has_batlife()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->batlife(), output);
  }

  // optional sint32 SumAcc = 10;
  if (has_sumacc()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->sumacc(), output);
  }

  // optional bytes Phone = 11;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->phone(), output);
  }

  // optional sint32 AmtrX = 12;
  if (has_amtrx()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->amtrx(), output);
  }

  // optional sint32 AmtrY = 13;
  if (has_amtry()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->amtry(), output);
  }

  // optional sint32 AmtrZ = 14;
  if (has_amtrz()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(14, this->amtrz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecReg_General::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 Time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional uint32 IDFAS = 2;
  if (has_idfas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->idfas(), target);
  }

  // optional bytes IDDrv = 3;
  if (has_iddrv()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->iddrv(), target);
  }

  // optional uint32 FLG = 4;
  if (has_flg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flg(), target);
  }

  // optional uint32 Mileage = 5;
  if (has_mileage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mileage(), target);
  }

  // optional uint32 VImp = 6;
  if (has_vimp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->vimp(), target);
  }

  // optional uint32 TImp = 7;
  if (has_timp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->timp(), target);
  }

  // optional uint32 Uboard = 8;
  if (has_uboard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->uboard(), target);
  }

  // optional uint32 BatLife = 9;
  if (has_batlife()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->batlife(), target);
  }

  // optional sint32 SumAcc = 10;
  if (has_sumacc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->sumacc(), target);
  }

  // optional bytes Phone = 11;
  if (has_phone()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->phone(), target);
  }

  // optional sint32 AmtrX = 12;
  if (has_amtrx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->amtrx(), target);
  }

  // optional sint32 AmtrY = 13;
  if (has_amtry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(13, this->amtry(), target);
  }

  // optional sint32 AmtrZ = 14;
  if (has_amtrz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(14, this->amtrz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecReg_General::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 IDFAS = 2;
    if (has_idfas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idfas());
    }

    // optional bytes IDDrv = 3;
    if (has_iddrv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->iddrv());
    }

    // optional uint32 FLG = 4;
    if (has_flg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flg());
    }

    // optional uint32 Mileage = 5;
    if (has_mileage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mileage());
    }

    // optional uint32 VImp = 6;
    if (has_vimp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vimp());
    }

    // optional uint32 TImp = 7;
    if (has_timp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timp());
    }

    // optional uint32 Uboard = 8;
    if (has_uboard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uboard());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 BatLife = 9;
    if (has_batlife()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batlife());
    }

    // optional sint32 SumAcc = 10;
    if (has_sumacc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->sumacc());
    }

    // optional bytes Phone = 11;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->phone());
    }

    // optional sint32 AmtrX = 12;
    if (has_amtrx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->amtrx());
    }

    // optional sint32 AmtrY = 13;
    if (has_amtry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->amtry());
    }

    // optional sint32 AmtrZ = 14;
    if (has_amtrz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->amtrz());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecReg_General::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecReg_General* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecReg_General*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecReg_General::MergeFrom(const RecReg_General& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_idfas()) {
      set_idfas(from.idfas());
    }
    if (from.has_iddrv()) {
      set_iddrv(from.iddrv());
    }
    if (from.has_flg()) {
      set_flg(from.flg());
    }
    if (from.has_mileage()) {
      set_mileage(from.mileage());
    }
    if (from.has_vimp()) {
      set_vimp(from.vimp());
    }
    if (from.has_timp()) {
      set_timp(from.timp());
    }
    if (from.has_uboard()) {
      set_uboard(from.uboard());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_batlife()) {
      set_batlife(from.batlife());
    }
    if (from.has_sumacc()) {
      set_sumacc(from.sumacc());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_amtrx()) {
      set_amtrx(from.amtrx());
    }
    if (from.has_amtry()) {
      set_amtry(from.amtry());
    }
    if (from.has_amtrz()) {
      set_amtrz(from.amtrz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecReg_General::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecReg_General::CopyFrom(const RecReg_General& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecReg_General::IsInitialized() const {

  return true;
}

void RecReg_General::Swap(RecReg_General* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(idfas_, other->idfas_);
    std::swap(iddrv_, other->iddrv_);
    std::swap(flg_, other->flg_);
    std::swap(mileage_, other->mileage_);
    std::swap(vimp_, other->vimp_);
    std::swap(timp_, other->timp_);
    std::swap(uboard_, other->uboard_);
    std::swap(batlife_, other->batlife_);
    std::swap(sumacc_, other->sumacc_);
    std::swap(phone_, other->phone_);
    std::swap(amtrx_, other->amtrx_);
    std::swap(amtry_, other->amtry_);
    std::swap(amtrz_, other->amtrz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecReg_General::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecReg_General_descriptor_;
  metadata.reflection = RecReg_General_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RecReg_Photo::kPOSBLKFieldNumber;
const int RecReg_Photo::kSZPHOTOFieldNumber;
const int RecReg_Photo::kSIZEFieldNumber;
const int RecReg_Photo::kBUFFieldNumber;
const int RecReg_Photo::kIDPHFieldNumber;
const int RecReg_Photo::kIMGSTATFieldNumber;
#endif  // !_MSC_VER

RecReg_Photo::RecReg_Photo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecReg_Photo::InitAsDefaultInstance() {
}

RecReg_Photo::RecReg_Photo(const RecReg_Photo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecReg_Photo::SharedCtor() {
  _cached_size_ = 0;
  posblk_ = 0u;
  szphoto_ = 0u;
  size_ = 0u;
  buf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  idph_ = 0u;
  imgstat_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecReg_Photo::~RecReg_Photo() {
  SharedDtor();
}

void RecReg_Photo::SharedDtor() {
  if (buf_ != &::google::protobuf::internal::kEmptyString) {
    delete buf_;
  }
  if (this != default_instance_) {
  }
}

void RecReg_Photo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecReg_Photo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecReg_Photo_descriptor_;
}

const RecReg_Photo& RecReg_Photo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RecReg_Photo* RecReg_Photo::default_instance_ = NULL;

RecReg_Photo* RecReg_Photo::New() const {
  return new RecReg_Photo;
}

void RecReg_Photo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    posblk_ = 0u;
    szphoto_ = 0u;
    size_ = 0u;
    if (has_buf()) {
      if (buf_ != &::google::protobuf::internal::kEmptyString) {
        buf_->clear();
      }
    }
    idph_ = 0u;
    imgstat_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecReg_Photo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 POSBLK = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &posblk_)));
          set_has_posblk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SZPHOTO;
        break;
      }

      // optional uint32 SZPHOTO = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SZPHOTO:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &szphoto_)));
          set_has_szphoto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SIZE;
        break;
      }

      // optional uint32 SIZE = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SIZE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_BUF;
        break;
      }

      // optional bytes BUF = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BUF:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IDPH;
        break;
      }

      // optional uint32 IDPH = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IDPH:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idph_)));
          set_has_idph();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IMGSTAT;
        break;
      }

      // optional uint32 IMGSTAT = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IMGSTAT:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imgstat_)));
          set_has_imgstat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecReg_Photo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 POSBLK = 1;
  if (has_posblk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->posblk(), output);
  }

  // optional uint32 SZPHOTO = 2;
  if (has_szphoto()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->szphoto(), output);
  }

  // optional uint32 SIZE = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->size(), output);
  }

  // optional bytes BUF = 4;
  if (has_buf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->buf(), output);
  }

  // optional uint32 IDPH = 5;
  if (has_idph()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->idph(), output);
  }

  // optional uint32 IMGSTAT = 6;
  if (has_imgstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->imgstat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecReg_Photo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 POSBLK = 1;
  if (has_posblk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->posblk(), target);
  }

  // optional uint32 SZPHOTO = 2;
  if (has_szphoto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->szphoto(), target);
  }

  // optional uint32 SIZE = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->size(), target);
  }

  // optional bytes BUF = 4;
  if (has_buf()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->buf(), target);
  }

  // optional uint32 IDPH = 5;
  if (has_idph()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->idph(), target);
  }

  // optional uint32 IMGSTAT = 6;
  if (has_imgstat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->imgstat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecReg_Photo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 POSBLK = 1;
    if (has_posblk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->posblk());
    }

    // optional uint32 SZPHOTO = 2;
    if (has_szphoto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->szphoto());
    }

    // optional uint32 SIZE = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

    // optional bytes BUF = 4;
    if (has_buf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buf());
    }

    // optional uint32 IDPH = 5;
    if (has_idph()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idph());
    }

    // optional uint32 IMGSTAT = 6;
    if (has_imgstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imgstat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecReg_Photo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecReg_Photo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecReg_Photo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecReg_Photo::MergeFrom(const RecReg_Photo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_posblk()) {
      set_posblk(from.posblk());
    }
    if (from.has_szphoto()) {
      set_szphoto(from.szphoto());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_buf()) {
      set_buf(from.buf());
    }
    if (from.has_idph()) {
      set_idph(from.idph());
    }
    if (from.has_imgstat()) {
      set_imgstat(from.imgstat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecReg_Photo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecReg_Photo::CopyFrom(const RecReg_Photo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecReg_Photo::IsInitialized() const {

  return true;
}

void RecReg_Photo::Swap(RecReg_Photo* other) {
  if (other != this) {
    std::swap(posblk_, other->posblk_);
    std::swap(szphoto_, other->szphoto_);
    std::swap(size_, other->size_);
    std::swap(buf_, other->buf_);
    std::swap(idph_, other->idph_);
    std::swap(imgstat_, other->imgstat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecReg_Photo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecReg_Photo_descriptor_;
  metadata.reflection = RecReg_Photo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RecReg_NAV::kLATFieldNumber;
const int RecReg_NAV::kLONFieldNumber;
const int RecReg_NAV::kGPSVelFieldNumber;
const int RecReg_NAV::kGPSDirFieldNumber;
const int RecReg_NAV::kGPSNSatFieldNumber;
const int RecReg_NAV::kGPSAltFieldNumber;
#endif  // !_MSC_VER

RecReg_NAV::RecReg_NAV()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecReg_NAV::InitAsDefaultInstance() {
}

RecReg_NAV::RecReg_NAV(const RecReg_NAV& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecReg_NAV::SharedCtor() {
  _cached_size_ = 0;
  lat_ = 0;
  lon_ = 0;
  gpsvel_ = 0u;
  gpsdir_ = 0u;
  gpsnsat_ = 0u;
  gpsalt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecReg_NAV::~RecReg_NAV() {
  SharedDtor();
}

void RecReg_NAV::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecReg_NAV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecReg_NAV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecReg_NAV_descriptor_;
}

const RecReg_NAV& RecReg_NAV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RecReg_NAV* RecReg_NAV::default_instance_ = NULL;

RecReg_NAV* RecReg_NAV::New() const {
  return new RecReg_NAV;
}

void RecReg_NAV::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lat_ = 0;
    lon_ = 0;
    gpsvel_ = 0u;
    gpsdir_ = 0u;
    gpsnsat_ = 0u;
    gpsalt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecReg_NAV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 LAT = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LON;
        break;
      }

      // required sint32 LON = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LON:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GPSVel;
        break;
      }

      // required uint32 GPSVel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GPSVel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpsvel_)));
          set_has_gpsvel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_GPSDir;
        break;
      }

      // required uint32 GPSDir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GPSDir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpsdir_)));
          set_has_gpsdir();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_GPSNSat;
        break;
      }

      // required uint32 GPSNSat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GPSNSat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpsnsat_)));
          set_has_gpsnsat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_GPSAlt;
        break;
      }

      // required sint32 GPSAlt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GPSAlt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &gpsalt_)));
          set_has_gpsalt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecReg_NAV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 LAT = 1;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->lat(), output);
  }

  // required sint32 LON = 2;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->lon(), output);
  }

  // required uint32 GPSVel = 3;
  if (has_gpsvel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gpsvel(), output);
  }

  // required uint32 GPSDir = 4;
  if (has_gpsdir()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gpsdir(), output);
  }

  // required uint32 GPSNSat = 5;
  if (has_gpsnsat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gpsnsat(), output);
  }

  // required sint32 GPSAlt = 6;
  if (has_gpsalt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->gpsalt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecReg_NAV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 LAT = 1;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->lat(), target);
  }

  // required sint32 LON = 2;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->lon(), target);
  }

  // required uint32 GPSVel = 3;
  if (has_gpsvel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gpsvel(), target);
  }

  // required uint32 GPSDir = 4;
  if (has_gpsdir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gpsdir(), target);
  }

  // required uint32 GPSNSat = 5;
  if (has_gpsnsat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gpsnsat(), target);
  }

  // required sint32 GPSAlt = 6;
  if (has_gpsalt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->gpsalt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecReg_NAV::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 LAT = 1;
    if (has_lat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->lat());
    }

    // required sint32 LON = 2;
    if (has_lon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->lon());
    }

    // required uint32 GPSVel = 3;
    if (has_gpsvel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpsvel());
    }

    // required uint32 GPSDir = 4;
    if (has_gpsdir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpsdir());
    }

    // required uint32 GPSNSat = 5;
    if (has_gpsnsat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpsnsat());
    }

    // required sint32 GPSAlt = 6;
    if (has_gpsalt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->gpsalt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecReg_NAV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecReg_NAV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecReg_NAV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecReg_NAV::MergeFrom(const RecReg_NAV& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_gpsvel()) {
      set_gpsvel(from.gpsvel());
    }
    if (from.has_gpsdir()) {
      set_gpsdir(from.gpsdir());
    }
    if (from.has_gpsnsat()) {
      set_gpsnsat(from.gpsnsat());
    }
    if (from.has_gpsalt()) {
      set_gpsalt(from.gpsalt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecReg_NAV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecReg_NAV::CopyFrom(const RecReg_NAV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecReg_NAV::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void RecReg_NAV::Swap(RecReg_NAV* other) {
  if (other != this) {
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(gpsvel_, other->gpsvel_);
    std::swap(gpsdir_, other->gpsdir_);
    std::swap(gpsnsat_, other->gpsnsat_);
    std::swap(gpsalt_, other->gpsalt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecReg_NAV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecReg_NAV_descriptor_;
  metadata.reflection = RecReg_NAV_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RecReg_UniDt::kUniVal0FieldNumber;
const int RecReg_UniDt::kUniVal1FieldNumber;
const int RecReg_UniDt::kUniVal2FieldNumber;
const int RecReg_UniDt::kUniVal3FieldNumber;
#endif  // !_MSC_VER

RecReg_UniDt::RecReg_UniDt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecReg_UniDt::InitAsDefaultInstance() {
}

RecReg_UniDt::RecReg_UniDt(const RecReg_UniDt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecReg_UniDt::SharedCtor() {
  _cached_size_ = 0;
  unival0_ = 0;
  unival1_ = 0;
  unival2_ = 0;
  unival3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecReg_UniDt::~RecReg_UniDt() {
  SharedDtor();
}

void RecReg_UniDt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecReg_UniDt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecReg_UniDt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecReg_UniDt_descriptor_;
}

const RecReg_UniDt& RecReg_UniDt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RecReg_UniDt* RecReg_UniDt::default_instance_ = NULL;

RecReg_UniDt* RecReg_UniDt::New() const {
  return new RecReg_UniDt;
}

void RecReg_UniDt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unival0_ = 0;
    unival1_ = 0;
    unival2_ = 0;
    unival3_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecReg_UniDt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 UniVal0 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &unival0_)));
          set_has_unival0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_UniVal1;
        break;
      }

      // optional sint32 UniVal1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UniVal1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &unival1_)));
          set_has_unival1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_UniVal2;
        break;
      }

      // optional sint32 UniVal2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UniVal2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &unival2_)));
          set_has_unival2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_UniVal3;
        break;
      }

      // optional sint32 UniVal3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UniVal3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &unival3_)));
          set_has_unival3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecReg_UniDt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 UniVal0 = 1;
  if (has_unival0()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->unival0(), output);
  }

  // optional sint32 UniVal1 = 2;
  if (has_unival1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->unival1(), output);
  }

  // optional sint32 UniVal2 = 3;
  if (has_unival2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->unival2(), output);
  }

  // optional sint32 UniVal3 = 4;
  if (has_unival3()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->unival3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecReg_UniDt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 UniVal0 = 1;
  if (has_unival0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->unival0(), target);
  }

  // optional sint32 UniVal1 = 2;
  if (has_unival1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->unival1(), target);
  }

  // optional sint32 UniVal2 = 3;
  if (has_unival2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->unival2(), target);
  }

  // optional sint32 UniVal3 = 4;
  if (has_unival3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->unival3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecReg_UniDt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 UniVal0 = 1;
    if (has_unival0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->unival0());
    }

    // optional sint32 UniVal1 = 2;
    if (has_unival1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->unival1());
    }

    // optional sint32 UniVal2 = 3;
    if (has_unival2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->unival2());
    }

    // optional sint32 UniVal3 = 4;
    if (has_unival3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->unival3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecReg_UniDt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecReg_UniDt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecReg_UniDt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecReg_UniDt::MergeFrom(const RecReg_UniDt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unival0()) {
      set_unival0(from.unival0());
    }
    if (from.has_unival1()) {
      set_unival1(from.unival1());
    }
    if (from.has_unival2()) {
      set_unival2(from.unival2());
    }
    if (from.has_unival3()) {
      set_unival3(from.unival3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecReg_UniDt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecReg_UniDt::CopyFrom(const RecReg_UniDt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecReg_UniDt::IsInitialized() const {

  return true;
}

void RecReg_UniDt::Swap(RecReg_UniDt* other) {
  if (other != this) {
    std::swap(unival0_, other->unival0_);
    std::swap(unival1_, other->unival1_);
    std::swap(unival2_, other->unival2_);
    std::swap(unival3_, other->unival3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecReg_UniDt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecReg_UniDt_descriptor_;
  metadata.reflection = RecReg_UniDt_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RecReg_CanDt::kSPN70FieldNumber;
const int RecReg_CanDt::kSPN91FieldNumber;
const int RecReg_CanDt::kSPN100FieldNumber;
const int RecReg_CanDt::kSPN110FieldNumber;
const int RecReg_CanDt::kSPN174FieldNumber;
const int RecReg_CanDt::kSPN175FieldNumber;
const int RecReg_CanDt::kSPN182FieldNumber;
const int RecReg_CanDt::kSPN184FieldNumber;
const int RecReg_CanDt::kSPN190FieldNumber;
const int RecReg_CanDt::kSPN244FieldNumber;
const int RecReg_CanDt::kSPN245FieldNumber;
const int RecReg_CanDt::kSPN247FieldNumber;
const int RecReg_CanDt::kSPN250FieldNumber;
const int RecReg_CanDt::kSPN521FieldNumber;
const int RecReg_CanDt::kSPN522FieldNumber;
const int RecReg_CanDt::kSPN527FieldNumber;
const int RecReg_CanDt::kSPN582FieldNumber;
const int RecReg_CanDt::kSPN597FieldNumber;
const int RecReg_CanDt::kSPN598FieldNumber;
const int RecReg_CanDt::kSPN914FieldNumber;
const int RecReg_CanDt::kSPN916FieldNumber;
const int RecReg_CanDt::kSPN928FieldNumber;
const int RecReg_CanDt::kSPN1624FieldNumber;
const int RecReg_CanDt::kSPN1821FieldNumber;
const int RecReg_CanDt::kSPN1856FieldNumber;
#endif  // !_MSC_VER

RecReg_CanDt::RecReg_CanDt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecReg_CanDt::InitAsDefaultInstance() {
}

RecReg_CanDt::RecReg_CanDt(const RecReg_CanDt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecReg_CanDt::SharedCtor() {
  _cached_size_ = 0;
  spn70_ = 0u;
  spn91_ = 0u;
  spn100_ = 0u;
  spn110_ = 0u;
  spn174_ = 0u;
  spn175_ = 0u;
  spn182_ = 0u;
  spn184_ = 0u;
  spn190_ = 0u;
  spn244_ = 0u;
  spn245_ = 0u;
  spn247_ = 0u;
  spn250_ = 0u;
  spn521_ = 0u;
  spn522_ = 0u;
  spn527_ = 0u;
  spn597_ = 0u;
  spn598_ = 0u;
  spn914_ = 0u;
  spn916_ = 0u;
  spn1624_ = 0u;
  spn1821_ = 0u;
  spn1856_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecReg_CanDt::~RecReg_CanDt() {
  SharedDtor();
}

void RecReg_CanDt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecReg_CanDt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecReg_CanDt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecReg_CanDt_descriptor_;
}

const RecReg_CanDt& RecReg_CanDt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RecReg_CanDt* RecReg_CanDt::default_instance_ = NULL;

RecReg_CanDt* RecReg_CanDt::New() const {
  return new RecReg_CanDt;
}

void RecReg_CanDt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    spn70_ = 0u;
    spn91_ = 0u;
    spn100_ = 0u;
    spn110_ = 0u;
    spn174_ = 0u;
    spn175_ = 0u;
    spn182_ = 0u;
    spn184_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    spn190_ = 0u;
    spn244_ = 0u;
    spn245_ = 0u;
    spn247_ = 0u;
    spn250_ = 0u;
    spn521_ = 0u;
    spn522_ = 0u;
    spn527_ = 0u;
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    spn597_ = 0u;
    spn598_ = 0u;
    spn914_ = 0u;
    spn916_ = 0u;
    spn1624_ = 0u;
    spn1821_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    spn1856_ = 0u;
  }
  spn582_.Clear();
  spn928_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecReg_CanDt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SPN70 = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spn70_)));
          set_has_spn70();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(728)) goto parse_SPN91;
        break;
      }

      // optional uint32 SPN91 = 91;
      case 91: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SPN91:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spn91_)));
          set_has_spn91();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_SPN100;
        break;
      }

      // optional uint32 SPN100 = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SPN100:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spn100_)));
          set_has_spn100();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(880)) goto parse_SPN110;
        break;
      }

      // optional uint32 SPN110 = 110;
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SPN110:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spn110_)));
          set_has_spn110();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1392)) goto parse_SPN174;
        break;
      }

      // optional uint32 SPN174 = 174;
      case 174: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SPN174:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spn174_)));
          set_has_spn174();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1400)) goto parse_SPN175;
        break;
      }

      // optional uint32 SPN175 = 175;
      case 175: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SPN175:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spn175_)));
          set_has_spn175();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1456)) goto parse_SPN182;
        break;
      }

      // optional uint32 SPN182 = 182;
      case 182: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SPN182:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spn182_)));
          set_has_spn182();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1472)) goto parse_SPN184;
        break;
      }

      // optional uint32 SPN184 = 184;
      case 184: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SPN184:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spn184_)));
          set_has_spn184();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1520)) goto parse_SPN190;
        break;
      }

      // optional uint32 SPN190 = 190;
      case 190: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SPN190:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spn190_)));
          set_has_spn190();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1952)) goto parse_SPN244;
        break;
      }

      // optional uint32 SPN244 = 244;
      case 244: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SPN244:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spn244_)));
          set_has_spn244();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1960)) goto parse_SPN245;
        break;
      }

      // optional uint32 SPN245 = 245;
      case 245: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SPN245:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spn245_)));
          set_has_spn245();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(1976)) goto parse_SPN247;
        break;
      }

      // optional uint32 SPN247 = 247;
      case 247: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SPN247:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spn247_)));
          set_has_spn247();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(2000)) goto parse_SPN250;
        break;
      }

      // optional uint32 SPN250 = 250;
      case 250: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SPN250:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spn250_)));
          set_has_spn250();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4168)) goto parse_SPN521;
        break;
      }

      // optional uint32 SPN521 = 521;
      case 521: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SPN521:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spn521_)));
          set_has_spn521();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4176)) goto parse_SPN522;
        break;
      }

      // optional uint32 SPN522 = 522;
      case 522: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SPN522:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spn522_)));
          set_has_spn522();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4216)) goto parse_SPN527;
        break;
      }

      // optional uint32 SPN527 = 527;
      case 527: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SPN527:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spn527_)));
          set_has_spn527();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4658)) goto parse_SPN582;
        break;
      }

      // repeated uint32 SPN582 = 582 [packed = true];
      case 582: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SPN582:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_spn582())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 4658, input, this->mutable_spn582())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4776)) goto parse_SPN597;
        break;
      }

      // optional uint32 SPN597 = 597;
      case 597: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SPN597:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spn597_)));
          set_has_spn597();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(4784)) goto parse_SPN598;
        break;
      }

      // optional uint32 SPN598 = 598;
      case 598: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SPN598:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spn598_)));
          set_has_spn598();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7312)) goto parse_SPN914;
        break;
      }

      // optional uint32 SPN914 = 914;
      case 914: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SPN914:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spn914_)));
          set_has_spn914();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7328)) goto parse_SPN916;
        break;
      }

      // optional uint32 SPN916 = 916;
      case 916: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SPN916:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spn916_)));
          set_has_spn916();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(7426)) goto parse_SPN928;
        break;
      }

      // repeated uint32 SPN928 = 928 [packed = true];
      case 928: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SPN928:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_spn928())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 7426, input, this->mutable_spn928())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(12992)) goto parse_SPN1624;
        break;
      }

      // optional uint32 SPN1624 = 1624;
      case 1624: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SPN1624:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spn1624_)));
          set_has_spn1624();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(14568)) goto parse_SPN1821;
        break;
      }

      // optional uint32 SPN1821 = 1821;
      case 1821: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SPN1821:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spn1821_)));
          set_has_spn1821();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(14848)) goto parse_SPN1856;
        break;
      }

      // optional uint32 SPN1856 = 1856;
      case 1856: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SPN1856:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spn1856_)));
          set_has_spn1856();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecReg_CanDt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 SPN70 = 70;
  if (has_spn70()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->spn70(), output);
  }

  // optional uint32 SPN91 = 91;
  if (has_spn91()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(91, this->spn91(), output);
  }

  // optional uint32 SPN100 = 100;
  if (has_spn100()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(100, this->spn100(), output);
  }

  // optional uint32 SPN110 = 110;
  if (has_spn110()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(110, this->spn110(), output);
  }

  // optional uint32 SPN174 = 174;
  if (has_spn174()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(174, this->spn174(), output);
  }

  // optional uint32 SPN175 = 175;
  if (has_spn175()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(175, this->spn175(), output);
  }

  // optional uint32 SPN182 = 182;
  if (has_spn182()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(182, this->spn182(), output);
  }

  // optional uint32 SPN184 = 184;
  if (has_spn184()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(184, this->spn184(), output);
  }

  // optional uint32 SPN190 = 190;
  if (has_spn190()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(190, this->spn190(), output);
  }

  // optional uint32 SPN244 = 244;
  if (has_spn244()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(244, this->spn244(), output);
  }

  // optional uint32 SPN245 = 245;
  if (has_spn245()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(245, this->spn245(), output);
  }

  // optional uint32 SPN247 = 247;
  if (has_spn247()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(247, this->spn247(), output);
  }

  // optional uint32 SPN250 = 250;
  if (has_spn250()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(250, this->spn250(), output);
  }

  // optional uint32 SPN521 = 521;
  if (has_spn521()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(521, this->spn521(), output);
  }

  // optional uint32 SPN522 = 522;
  if (has_spn522()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(522, this->spn522(), output);
  }

  // optional uint32 SPN527 = 527;
  if (has_spn527()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(527, this->spn527(), output);
  }

  // repeated uint32 SPN582 = 582 [packed = true];
  if (this->spn582_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(582, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_spn582_cached_byte_size_);
  }
  for (int i = 0; i < this->spn582_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->spn582(i), output);
  }

  // optional uint32 SPN597 = 597;
  if (has_spn597()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(597, this->spn597(), output);
  }

  // optional uint32 SPN598 = 598;
  if (has_spn598()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(598, this->spn598(), output);
  }

  // optional uint32 SPN914 = 914;
  if (has_spn914()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(914, this->spn914(), output);
  }

  // optional uint32 SPN916 = 916;
  if (has_spn916()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(916, this->spn916(), output);
  }

  // repeated uint32 SPN928 = 928 [packed = true];
  if (this->spn928_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(928, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_spn928_cached_byte_size_);
  }
  for (int i = 0; i < this->spn928_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->spn928(i), output);
  }

  // optional uint32 SPN1624 = 1624;
  if (has_spn1624()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1624, this->spn1624(), output);
  }

  // optional uint32 SPN1821 = 1821;
  if (has_spn1821()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1821, this->spn1821(), output);
  }

  // optional uint32 SPN1856 = 1856;
  if (has_spn1856()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1856, this->spn1856(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecReg_CanDt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 SPN70 = 70;
  if (has_spn70()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->spn70(), target);
  }

  // optional uint32 SPN91 = 91;
  if (has_spn91()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(91, this->spn91(), target);
  }

  // optional uint32 SPN100 = 100;
  if (has_spn100()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(100, this->spn100(), target);
  }

  // optional uint32 SPN110 = 110;
  if (has_spn110()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(110, this->spn110(), target);
  }

  // optional uint32 SPN174 = 174;
  if (has_spn174()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(174, this->spn174(), target);
  }

  // optional uint32 SPN175 = 175;
  if (has_spn175()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(175, this->spn175(), target);
  }

  // optional uint32 SPN182 = 182;
  if (has_spn182()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(182, this->spn182(), target);
  }

  // optional uint32 SPN184 = 184;
  if (has_spn184()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(184, this->spn184(), target);
  }

  // optional uint32 SPN190 = 190;
  if (has_spn190()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(190, this->spn190(), target);
  }

  // optional uint32 SPN244 = 244;
  if (has_spn244()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(244, this->spn244(), target);
  }

  // optional uint32 SPN245 = 245;
  if (has_spn245()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(245, this->spn245(), target);
  }

  // optional uint32 SPN247 = 247;
  if (has_spn247()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(247, this->spn247(), target);
  }

  // optional uint32 SPN250 = 250;
  if (has_spn250()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(250, this->spn250(), target);
  }

  // optional uint32 SPN521 = 521;
  if (has_spn521()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(521, this->spn521(), target);
  }

  // optional uint32 SPN522 = 522;
  if (has_spn522()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(522, this->spn522(), target);
  }

  // optional uint32 SPN527 = 527;
  if (has_spn527()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(527, this->spn527(), target);
  }

  // repeated uint32 SPN582 = 582 [packed = true];
  if (this->spn582_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      582,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _spn582_cached_byte_size_, target);
  }
  for (int i = 0; i < this->spn582_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->spn582(i), target);
  }

  // optional uint32 SPN597 = 597;
  if (has_spn597()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(597, this->spn597(), target);
  }

  // optional uint32 SPN598 = 598;
  if (has_spn598()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(598, this->spn598(), target);
  }

  // optional uint32 SPN914 = 914;
  if (has_spn914()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(914, this->spn914(), target);
  }

  // optional uint32 SPN916 = 916;
  if (has_spn916()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(916, this->spn916(), target);
  }

  // repeated uint32 SPN928 = 928 [packed = true];
  if (this->spn928_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      928,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _spn928_cached_byte_size_, target);
  }
  for (int i = 0; i < this->spn928_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->spn928(i), target);
  }

  // optional uint32 SPN1624 = 1624;
  if (has_spn1624()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1624, this->spn1624(), target);
  }

  // optional uint32 SPN1821 = 1821;
  if (has_spn1821()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1821, this->spn1821(), target);
  }

  // optional uint32 SPN1856 = 1856;
  if (has_spn1856()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1856, this->spn1856(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecReg_CanDt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SPN70 = 70;
    if (has_spn70()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spn70());
    }

    // optional uint32 SPN91 = 91;
    if (has_spn91()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spn91());
    }

    // optional uint32 SPN100 = 100;
    if (has_spn100()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spn100());
    }

    // optional uint32 SPN110 = 110;
    if (has_spn110()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spn110());
    }

    // optional uint32 SPN174 = 174;
    if (has_spn174()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spn174());
    }

    // optional uint32 SPN175 = 175;
    if (has_spn175()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spn175());
    }

    // optional uint32 SPN182 = 182;
    if (has_spn182()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spn182());
    }

    // optional uint32 SPN184 = 184;
    if (has_spn184()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spn184());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 SPN190 = 190;
    if (has_spn190()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spn190());
    }

    // optional uint32 SPN244 = 244;
    if (has_spn244()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spn244());
    }

    // optional uint32 SPN245 = 245;
    if (has_spn245()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spn245());
    }

    // optional uint32 SPN247 = 247;
    if (has_spn247()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spn247());
    }

    // optional uint32 SPN250 = 250;
    if (has_spn250()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spn250());
    }

    // optional uint32 SPN521 = 521;
    if (has_spn521()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spn521());
    }

    // optional uint32 SPN522 = 522;
    if (has_spn522()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spn522());
    }

    // optional uint32 SPN527 = 527;
    if (has_spn527()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spn527());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional uint32 SPN597 = 597;
    if (has_spn597()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spn597());
    }

    // optional uint32 SPN598 = 598;
    if (has_spn598()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spn598());
    }

    // optional uint32 SPN914 = 914;
    if (has_spn914()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spn914());
    }

    // optional uint32 SPN916 = 916;
    if (has_spn916()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spn916());
    }

    // optional uint32 SPN1624 = 1624;
    if (has_spn1624()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spn1624());
    }

    // optional uint32 SPN1821 = 1821;
    if (has_spn1821()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spn1821());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 SPN1856 = 1856;
    if (has_spn1856()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spn1856());
    }

  }
  // repeated uint32 SPN582 = 582 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->spn582_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->spn582(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _spn582_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 SPN928 = 928 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->spn928_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->spn928(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _spn928_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecReg_CanDt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecReg_CanDt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecReg_CanDt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecReg_CanDt::MergeFrom(const RecReg_CanDt& from) {
  GOOGLE_CHECK_NE(&from, this);
  spn582_.MergeFrom(from.spn582_);
  spn928_.MergeFrom(from.spn928_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spn70()) {
      set_spn70(from.spn70());
    }
    if (from.has_spn91()) {
      set_spn91(from.spn91());
    }
    if (from.has_spn100()) {
      set_spn100(from.spn100());
    }
    if (from.has_spn110()) {
      set_spn110(from.spn110());
    }
    if (from.has_spn174()) {
      set_spn174(from.spn174());
    }
    if (from.has_spn175()) {
      set_spn175(from.spn175());
    }
    if (from.has_spn182()) {
      set_spn182(from.spn182());
    }
    if (from.has_spn184()) {
      set_spn184(from.spn184());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_spn190()) {
      set_spn190(from.spn190());
    }
    if (from.has_spn244()) {
      set_spn244(from.spn244());
    }
    if (from.has_spn245()) {
      set_spn245(from.spn245());
    }
    if (from.has_spn247()) {
      set_spn247(from.spn247());
    }
    if (from.has_spn250()) {
      set_spn250(from.spn250());
    }
    if (from.has_spn521()) {
      set_spn521(from.spn521());
    }
    if (from.has_spn522()) {
      set_spn522(from.spn522());
    }
    if (from.has_spn527()) {
      set_spn527(from.spn527());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_spn597()) {
      set_spn597(from.spn597());
    }
    if (from.has_spn598()) {
      set_spn598(from.spn598());
    }
    if (from.has_spn914()) {
      set_spn914(from.spn914());
    }
    if (from.has_spn916()) {
      set_spn916(from.spn916());
    }
    if (from.has_spn1624()) {
      set_spn1624(from.spn1624());
    }
    if (from.has_spn1821()) {
      set_spn1821(from.spn1821());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_spn1856()) {
      set_spn1856(from.spn1856());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecReg_CanDt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecReg_CanDt::CopyFrom(const RecReg_CanDt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecReg_CanDt::IsInitialized() const {

  return true;
}

void RecReg_CanDt::Swap(RecReg_CanDt* other) {
  if (other != this) {
    std::swap(spn70_, other->spn70_);
    std::swap(spn91_, other->spn91_);
    std::swap(spn100_, other->spn100_);
    std::swap(spn110_, other->spn110_);
    std::swap(spn174_, other->spn174_);
    std::swap(spn175_, other->spn175_);
    std::swap(spn182_, other->spn182_);
    std::swap(spn184_, other->spn184_);
    std::swap(spn190_, other->spn190_);
    std::swap(spn244_, other->spn244_);
    std::swap(spn245_, other->spn245_);
    std::swap(spn247_, other->spn247_);
    std::swap(spn250_, other->spn250_);
    std::swap(spn521_, other->spn521_);
    std::swap(spn522_, other->spn522_);
    std::swap(spn527_, other->spn527_);
    spn582_.Swap(&other->spn582_);
    std::swap(spn597_, other->spn597_);
    std::swap(spn598_, other->spn598_);
    std::swap(spn914_, other->spn914_);
    std::swap(spn916_, other->spn916_);
    spn928_.Swap(&other->spn928_);
    std::swap(spn1624_, other->spn1624_);
    std::swap(spn1821_, other->spn1821_);
    std::swap(spn1856_, other->spn1856_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecReg_CanDt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecReg_CanDt_descriptor_;
  metadata.reflection = RecReg_CanDt_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RecReg_LLSDt::kTLLS1FieldNumber;
const int RecReg_LLSDt::kCLLS1FieldNumber;
const int RecReg_LLSDt::kFLLS1FieldNumber;
const int RecReg_LLSDt::kTLLS2FieldNumber;
const int RecReg_LLSDt::kCLLS2FieldNumber;
const int RecReg_LLSDt::kFLLS2FieldNumber;
const int RecReg_LLSDt::kTLLS3FieldNumber;
const int RecReg_LLSDt::kCLLS3FieldNumber;
const int RecReg_LLSDt::kFLLS3FieldNumber;
const int RecReg_LLSDt::kTLLS4FieldNumber;
const int RecReg_LLSDt::kCLLS4FieldNumber;
const int RecReg_LLSDt::kFLLS4FieldNumber;
const int RecReg_LLSDt::kTLLS5FieldNumber;
const int RecReg_LLSDt::kCLLS5FieldNumber;
const int RecReg_LLSDt::kFLLS5FieldNumber;
const int RecReg_LLSDt::kTLLS6FieldNumber;
const int RecReg_LLSDt::kCLLS6FieldNumber;
const int RecReg_LLSDt::kFLLS6FieldNumber;
#endif  // !_MSC_VER

RecReg_LLSDt::RecReg_LLSDt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecReg_LLSDt::InitAsDefaultInstance() {
}

RecReg_LLSDt::RecReg_LLSDt(const RecReg_LLSDt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecReg_LLSDt::SharedCtor() {
  _cached_size_ = 0;
  tlls1_ = 0;
  clls1_ = 0u;
  flls1_ = 0;
  tlls2_ = 0;
  clls2_ = 0u;
  flls2_ = 0;
  tlls3_ = 0;
  clls3_ = 0u;
  flls3_ = 0;
  tlls4_ = 0;
  clls4_ = 0u;
  flls4_ = 0;
  tlls5_ = 0;
  clls5_ = 0u;
  flls5_ = 0;
  tlls6_ = 0;
  clls6_ = 0u;
  flls6_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecReg_LLSDt::~RecReg_LLSDt() {
  SharedDtor();
}

void RecReg_LLSDt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecReg_LLSDt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecReg_LLSDt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecReg_LLSDt_descriptor_;
}

const RecReg_LLSDt& RecReg_LLSDt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RecReg_LLSDt* RecReg_LLSDt::default_instance_ = NULL;

RecReg_LLSDt* RecReg_LLSDt::New() const {
  return new RecReg_LLSDt;
}

void RecReg_LLSDt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tlls1_ = 0;
    clls1_ = 0u;
    flls1_ = 0;
    tlls2_ = 0;
    clls2_ = 0u;
    flls2_ = 0;
    tlls3_ = 0;
    clls3_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    flls3_ = 0;
    tlls4_ = 0;
    clls4_ = 0u;
    flls4_ = 0;
    tlls5_ = 0;
    clls5_ = 0u;
    flls5_ = 0;
    tlls6_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    clls6_ = 0u;
    flls6_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecReg_LLSDt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 TLLS1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tlls1_)));
          set_has_tlls1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CLLS1;
        break;
      }

      // optional uint32 CLLS1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CLLS1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clls1_)));
          set_has_clls1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FLLS1;
        break;
      }

      // optional sint32 FLLS1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FLLS1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &flls1_)));
          set_has_flls1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TLLS2;
        break;
      }

      // optional sint32 TLLS2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TLLS2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tlls2_)));
          set_has_tlls2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_CLLS2;
        break;
      }

      // optional uint32 CLLS2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CLLS2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clls2_)));
          set_has_clls2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FLLS2;
        break;
      }

      // optional sint32 FLLS2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FLLS2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &flls2_)));
          set_has_flls2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_TLLS3;
        break;
      }

      // optional sint32 TLLS3 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TLLS3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tlls3_)));
          set_has_tlls3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CLLS3;
        break;
      }

      // optional uint32 CLLS3 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CLLS3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clls3_)));
          set_has_clls3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_FLLS3;
        break;
      }

      // optional sint32 FLLS3 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FLLS3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &flls3_)));
          set_has_flls3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_TLLS4;
        break;
      }

      // optional sint32 TLLS4 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TLLS4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tlls4_)));
          set_has_tlls4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_CLLS4;
        break;
      }

      // optional uint32 CLLS4 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CLLS4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clls4_)));
          set_has_clls4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_FLLS4;
        break;
      }

      // optional sint32 FLLS4 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FLLS4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &flls4_)));
          set_has_flls4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_TLLS5;
        break;
      }

      // optional sint32 TLLS5 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TLLS5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tlls5_)));
          set_has_tlls5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_CLLS5;
        break;
      }

      // optional uint32 CLLS5 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CLLS5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clls5_)));
          set_has_clls5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_FLLS5;
        break;
      }

      // optional sint32 FLLS5 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FLLS5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &flls5_)));
          set_has_flls5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_TLLS6;
        break;
      }

      // optional sint32 TLLS6 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TLLS6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tlls6_)));
          set_has_tlls6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_CLLS6;
        break;
      }

      // optional uint32 CLLS6 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CLLS6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clls6_)));
          set_has_clls6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_FLLS6;
        break;
      }

      // optional uint32 FLLS6 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FLLS6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flls6_)));
          set_has_flls6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecReg_LLSDt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 TLLS1 = 1;
  if (has_tlls1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->tlls1(), output);
  }

  // optional uint32 CLLS1 = 2;
  if (has_clls1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->clls1(), output);
  }

  // optional sint32 FLLS1 = 3;
  if (has_flls1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->flls1(), output);
  }

  // optional sint32 TLLS2 = 4;
  if (has_tlls2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->tlls2(), output);
  }

  // optional uint32 CLLS2 = 5;
  if (has_clls2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->clls2(), output);
  }

  // optional sint32 FLLS2 = 6;
  if (has_flls2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->flls2(), output);
  }

  // optional sint32 TLLS3 = 7;
  if (has_tlls3()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->tlls3(), output);
  }

  // optional uint32 CLLS3 = 8;
  if (has_clls3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->clls3(), output);
  }

  // optional sint32 FLLS3 = 9;
  if (has_flls3()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->flls3(), output);
  }

  // optional sint32 TLLS4 = 10;
  if (has_tlls4()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->tlls4(), output);
  }

  // optional uint32 CLLS4 = 11;
  if (has_clls4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->clls4(), output);
  }

  // optional sint32 FLLS4 = 12;
  if (has_flls4()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->flls4(), output);
  }

  // optional sint32 TLLS5 = 13;
  if (has_tlls5()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->tlls5(), output);
  }

  // optional uint32 CLLS5 = 14;
  if (has_clls5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->clls5(), output);
  }

  // optional sint32 FLLS5 = 15;
  if (has_flls5()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(15, this->flls5(), output);
  }

  // optional sint32 TLLS6 = 16;
  if (has_tlls6()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(16, this->tlls6(), output);
  }

  // optional uint32 CLLS6 = 17;
  if (has_clls6()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->clls6(), output);
  }

  // optional uint32 FLLS6 = 18;
  if (has_flls6()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->flls6(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecReg_LLSDt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 TLLS1 = 1;
  if (has_tlls1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->tlls1(), target);
  }

  // optional uint32 CLLS1 = 2;
  if (has_clls1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->clls1(), target);
  }

  // optional sint32 FLLS1 = 3;
  if (has_flls1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->flls1(), target);
  }

  // optional sint32 TLLS2 = 4;
  if (has_tlls2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->tlls2(), target);
  }

  // optional uint32 CLLS2 = 5;
  if (has_clls2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->clls2(), target);
  }

  // optional sint32 FLLS2 = 6;
  if (has_flls2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->flls2(), target);
  }

  // optional sint32 TLLS3 = 7;
  if (has_tlls3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->tlls3(), target);
  }

  // optional uint32 CLLS3 = 8;
  if (has_clls3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->clls3(), target);
  }

  // optional sint32 FLLS3 = 9;
  if (has_flls3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->flls3(), target);
  }

  // optional sint32 TLLS4 = 10;
  if (has_tlls4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->tlls4(), target);
  }

  // optional uint32 CLLS4 = 11;
  if (has_clls4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->clls4(), target);
  }

  // optional sint32 FLLS4 = 12;
  if (has_flls4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->flls4(), target);
  }

  // optional sint32 TLLS5 = 13;
  if (has_tlls5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(13, this->tlls5(), target);
  }

  // optional uint32 CLLS5 = 14;
  if (has_clls5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->clls5(), target);
  }

  // optional sint32 FLLS5 = 15;
  if (has_flls5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(15, this->flls5(), target);
  }

  // optional sint32 TLLS6 = 16;
  if (has_tlls6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(16, this->tlls6(), target);
  }

  // optional uint32 CLLS6 = 17;
  if (has_clls6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->clls6(), target);
  }

  // optional uint32 FLLS6 = 18;
  if (has_flls6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->flls6(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecReg_LLSDt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 TLLS1 = 1;
    if (has_tlls1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->tlls1());
    }

    // optional uint32 CLLS1 = 2;
    if (has_clls1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clls1());
    }

    // optional sint32 FLLS1 = 3;
    if (has_flls1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->flls1());
    }

    // optional sint32 TLLS2 = 4;
    if (has_tlls2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->tlls2());
    }

    // optional uint32 CLLS2 = 5;
    if (has_clls2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clls2());
    }

    // optional sint32 FLLS2 = 6;
    if (has_flls2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->flls2());
    }

    // optional sint32 TLLS3 = 7;
    if (has_tlls3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->tlls3());
    }

    // optional uint32 CLLS3 = 8;
    if (has_clls3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clls3());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sint32 FLLS3 = 9;
    if (has_flls3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->flls3());
    }

    // optional sint32 TLLS4 = 10;
    if (has_tlls4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->tlls4());
    }

    // optional uint32 CLLS4 = 11;
    if (has_clls4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clls4());
    }

    // optional sint32 FLLS4 = 12;
    if (has_flls4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->flls4());
    }

    // optional sint32 TLLS5 = 13;
    if (has_tlls5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->tlls5());
    }

    // optional uint32 CLLS5 = 14;
    if (has_clls5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clls5());
    }

    // optional sint32 FLLS5 = 15;
    if (has_flls5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->flls5());
    }

    // optional sint32 TLLS6 = 16;
    if (has_tlls6()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->tlls6());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 CLLS6 = 17;
    if (has_clls6()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clls6());
    }

    // optional uint32 FLLS6 = 18;
    if (has_flls6()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flls6());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecReg_LLSDt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecReg_LLSDt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecReg_LLSDt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecReg_LLSDt::MergeFrom(const RecReg_LLSDt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tlls1()) {
      set_tlls1(from.tlls1());
    }
    if (from.has_clls1()) {
      set_clls1(from.clls1());
    }
    if (from.has_flls1()) {
      set_flls1(from.flls1());
    }
    if (from.has_tlls2()) {
      set_tlls2(from.tlls2());
    }
    if (from.has_clls2()) {
      set_clls2(from.clls2());
    }
    if (from.has_flls2()) {
      set_flls2(from.flls2());
    }
    if (from.has_tlls3()) {
      set_tlls3(from.tlls3());
    }
    if (from.has_clls3()) {
      set_clls3(from.clls3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_flls3()) {
      set_flls3(from.flls3());
    }
    if (from.has_tlls4()) {
      set_tlls4(from.tlls4());
    }
    if (from.has_clls4()) {
      set_clls4(from.clls4());
    }
    if (from.has_flls4()) {
      set_flls4(from.flls4());
    }
    if (from.has_tlls5()) {
      set_tlls5(from.tlls5());
    }
    if (from.has_clls5()) {
      set_clls5(from.clls5());
    }
    if (from.has_flls5()) {
      set_flls5(from.flls5());
    }
    if (from.has_tlls6()) {
      set_tlls6(from.tlls6());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_clls6()) {
      set_clls6(from.clls6());
    }
    if (from.has_flls6()) {
      set_flls6(from.flls6());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecReg_LLSDt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecReg_LLSDt::CopyFrom(const RecReg_LLSDt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecReg_LLSDt::IsInitialized() const {

  return true;
}

void RecReg_LLSDt::Swap(RecReg_LLSDt* other) {
  if (other != this) {
    std::swap(tlls1_, other->tlls1_);
    std::swap(clls1_, other->clls1_);
    std::swap(flls1_, other->flls1_);
    std::swap(tlls2_, other->tlls2_);
    std::swap(clls2_, other->clls2_);
    std::swap(flls2_, other->flls2_);
    std::swap(tlls3_, other->tlls3_);
    std::swap(clls3_, other->clls3_);
    std::swap(flls3_, other->flls3_);
    std::swap(tlls4_, other->tlls4_);
    std::swap(clls4_, other->clls4_);
    std::swap(flls4_, other->flls4_);
    std::swap(tlls5_, other->tlls5_);
    std::swap(clls5_, other->clls5_);
    std::swap(flls5_, other->flls5_);
    std::swap(tlls6_, other->tlls6_);
    std::swap(clls6_, other->clls6_);
    std::swap(flls6_, other->flls6_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecReg_LLSDt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecReg_LLSDt_descriptor_;
  metadata.reflection = RecReg_LLSDt_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RecReg_LOG::kDebugFieldNumber;
#endif  // !_MSC_VER

RecReg_LOG::RecReg_LOG()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecReg_LOG::InitAsDefaultInstance() {
}

RecReg_LOG::RecReg_LOG(const RecReg_LOG& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecReg_LOG::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecReg_LOG::~RecReg_LOG() {
  SharedDtor();
}

void RecReg_LOG::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecReg_LOG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecReg_LOG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecReg_LOG_descriptor_;
}

const RecReg_LOG& RecReg_LOG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RecReg_LOG* RecReg_LOG::default_instance_ = NULL;

RecReg_LOG* RecReg_LOG::New() const {
  return new RecReg_LOG;
}

void RecReg_LOG::Clear() {
  debug_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecReg_LOG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string Debug = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Debug:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_debug()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug(this->debug_size() - 1).data(),
            this->debug(this->debug_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Debug;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecReg_LOG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string Debug = 1;
  for (int i = 0; i < this->debug_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->debug(i).data(), this->debug(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->debug(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecReg_LOG::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string Debug = 1;
  for (int i = 0; i < this->debug_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug(i).data(), this->debug(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->debug(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecReg_LOG::ByteSize() const {
  int total_size = 0;

  // repeated string Debug = 1;
  total_size += 1 * this->debug_size();
  for (int i = 0; i < this->debug_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->debug(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecReg_LOG::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecReg_LOG* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecReg_LOG*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecReg_LOG::MergeFrom(const RecReg_LOG& from) {
  GOOGLE_CHECK_NE(&from, this);
  debug_.MergeFrom(from.debug_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecReg_LOG::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecReg_LOG::CopyFrom(const RecReg_LOG& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecReg_LOG::IsInitialized() const {

  return true;
}

void RecReg_LOG::Swap(RecReg_LOG* other) {
  if (other != this) {
    debug_.Swap(&other->debug_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecReg_LOG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecReg_LOG_descriptor_;
  metadata.reflection = RecReg_LOG_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RecReg::kMIDFieldNumber;
const int RecReg::kGeneralFieldNumber;
const int RecReg::kPhotoFieldNumber;
const int RecReg::kNavFieldNumber;
const int RecReg::kUnidtFieldNumber;
const int RecReg::kCandtFieldNumber;
const int RecReg::kLlsdtFieldNumber;
const int RecReg::kLogFieldNumber;
#endif  // !_MSC_VER

RecReg::RecReg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecReg::InitAsDefaultInstance() {
  general_ = const_cast< ::RecReg_General*>(&::RecReg_General::default_instance());
  photo_ = const_cast< ::RecReg_Photo*>(&::RecReg_Photo::default_instance());
  nav_ = const_cast< ::RecReg_NAV*>(&::RecReg_NAV::default_instance());
  unidt_ = const_cast< ::RecReg_UniDt*>(&::RecReg_UniDt::default_instance());
  candt_ = const_cast< ::RecReg_CanDt*>(&::RecReg_CanDt::default_instance());
  llsdt_ = const_cast< ::RecReg_LLSDt*>(&::RecReg_LLSDt::default_instance());
  log_ = const_cast< ::RecReg_LOG*>(&::RecReg_LOG::default_instance());
}

RecReg::RecReg(const RecReg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecReg::SharedCtor() {
  _cached_size_ = 0;
  general_ = NULL;
  photo_ = NULL;
  nav_ = NULL;
  unidt_ = NULL;
  candt_ = NULL;
  llsdt_ = NULL;
  log_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecReg::~RecReg() {
  SharedDtor();
}

void RecReg::SharedDtor() {
  if (this != default_instance_) {
    delete general_;
    delete photo_;
    delete nav_;
    delete unidt_;
    delete candt_;
    delete llsdt_;
    delete log_;
  }
}

void RecReg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecReg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecReg_descriptor_;
}

const RecReg& RecReg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

RecReg* RecReg::default_instance_ = NULL;

RecReg* RecReg::New() const {
  return new RecReg;
}

void RecReg::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_general()) {
      if (general_ != NULL) general_->::RecReg_General::Clear();
    }
    if (has_photo()) {
      if (photo_ != NULL) photo_->::RecReg_Photo::Clear();
    }
    if (has_nav()) {
      if (nav_ != NULL) nav_->::RecReg_NAV::Clear();
    }
    if (has_unidt()) {
      if (unidt_ != NULL) unidt_->::RecReg_UniDt::Clear();
    }
    if (has_candt()) {
      if (candt_ != NULL) candt_->::RecReg_CanDt::Clear();
    }
    if (has_llsdt()) {
      if (llsdt_ != NULL) llsdt_->::RecReg_LLSDt::Clear();
    }
    if (has_log()) {
      if (log_ != NULL) log_->::RecReg_LOG::Clear();
    }
  }
  mid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecReg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 mID = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_mid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(19)) goto parse_general;
        break;
      }

      // optional group General = 2 {
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_general:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                2, input, mutable_general()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(35)) goto parse_photo;
        break;
      }

      // optional group Photo = 4 {
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_photo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                4, input, mutable_photo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(43)) goto parse_nav;
        break;
      }

      // optional group NAV = 5 {
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_nav:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                5, input, mutable_nav()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(51)) goto parse_unidt;
        break;
      }

      // optional group UniDt = 6 {
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_unidt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                6, input, mutable_unidt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(59)) goto parse_candt;
        break;
      }

      // optional group CanDt = 7 {
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_candt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                7, input, mutable_candt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(67)) goto parse_llsdt;
        break;
      }

      // optional group LLSDt = 8 {
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_llsdt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                8, input, mutable_llsdt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(131)) goto parse_log;
        break;
      }

      // optional group LOG = 16 {
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_START_GROUP) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                16, input, mutable_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecReg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 mID = 1 [packed = true];
  if (this->mid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_mid_cached_byte_size_);
  }
  for (int i = 0; i < this->mid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->mid(i), output);
  }

  // optional group General = 2 {
  if (has_general()) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      2, this->general(), output);
  }

  // optional group Photo = 4 {
  if (has_photo()) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      4, this->photo(), output);
  }

  // optional group NAV = 5 {
  if (has_nav()) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      5, this->nav(), output);
  }

  // optional group UniDt = 6 {
  if (has_unidt()) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      6, this->unidt(), output);
  }

  // optional group CanDt = 7 {
  if (has_candt()) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      7, this->candt(), output);
  }

  // optional group LLSDt = 8 {
  if (has_llsdt()) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      8, this->llsdt(), output);
  }

  // optional group LOG = 16 {
  if (has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      16, this->log(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecReg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 mID = 1 [packed = true];
  if (this->mid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _mid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->mid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->mid(i), target);
  }

  // optional group General = 2 {
  if (has_general()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        2, this->general(), target);
  }

  // optional group Photo = 4 {
  if (has_photo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        4, this->photo(), target);
  }

  // optional group NAV = 5 {
  if (has_nav()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        5, this->nav(), target);
  }

  // optional group UniDt = 6 {
  if (has_unidt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        6, this->unidt(), target);
  }

  // optional group CanDt = 7 {
  if (has_candt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        7, this->candt(), target);
  }

  // optional group LLSDt = 8 {
  if (has_llsdt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        8, this->llsdt(), target);
  }

  // optional group LOG = 16 {
  if (has_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteGroupNoVirtualToArray(
        16, this->log(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecReg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional group General = 2 {
    if (has_general()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->general());
    }

    // optional group Photo = 4 {
    if (has_photo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->photo());
    }

    // optional group NAV = 5 {
    if (has_nav()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->nav());
    }

    // optional group UniDt = 6 {
    if (has_unidt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->unidt());
    }

    // optional group CanDt = 7 {
    if (has_candt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->candt());
    }

    // optional group LLSDt = 8 {
    if (has_llsdt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->llsdt());
    }

    // optional group LOG = 16 {
    if (has_log()) {
      total_size += 4 +
        ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
          this->log());
    }

  }
  // repeated uint32 mID = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->mid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecReg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecReg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecReg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecReg::MergeFrom(const RecReg& from) {
  GOOGLE_CHECK_NE(&from, this);
  mid_.MergeFrom(from.mid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_general()) {
      mutable_general()->::RecReg_General::MergeFrom(from.general());
    }
    if (from.has_photo()) {
      mutable_photo()->::RecReg_Photo::MergeFrom(from.photo());
    }
    if (from.has_nav()) {
      mutable_nav()->::RecReg_NAV::MergeFrom(from.nav());
    }
    if (from.has_unidt()) {
      mutable_unidt()->::RecReg_UniDt::MergeFrom(from.unidt());
    }
    if (from.has_candt()) {
      mutable_candt()->::RecReg_CanDt::MergeFrom(from.candt());
    }
    if (from.has_llsdt()) {
      mutable_llsdt()->::RecReg_LLSDt::MergeFrom(from.llsdt());
    }
    if (from.has_log()) {
      mutable_log()->::RecReg_LOG::MergeFrom(from.log());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecReg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecReg::CopyFrom(const RecReg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecReg::IsInitialized() const {

  if (has_nav()) {
    if (!this->nav().IsInitialized()) return false;
  }
  return true;
}

void RecReg::Swap(RecReg* other) {
  if (other != this) {
    mid_.Swap(&other->mid_);
    std::swap(general_, other->general_);
    std::swap(photo_, other->photo_);
    std::swap(nav_, other->nav_);
    std::swap(unidt_, other->unidt_);
    std::swap(candt_, other->candt_);
    std::swap(llsdt_, other->llsdt_);
    std::swap(log_, other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecReg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecReg_descriptor_;
  metadata.reflection = RecReg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
